/* RemoteDataLists v4.5 2024 Copyright Tomasz Kunicki, AdRem Software, all rights reseved */
(function(global,factory){"use strict";if(typeof define==="function"&&define.amd){define("remoteDataLists",["client"],function(adrem){factory(adrem);return adrem.RemoteDataListStore})}else{factory(global.adrem)}})(typeof window==="undefined"?global:window,function(adrem){"use strict";const isIterable=obj=>typeof obj!=="string"&&typeof obj?.[Symbol.iterator]==="function",E_DATA_CHANGED=0,E_PROPERTIES_CHANGED=1,E_DATA_CHANGED_WITH_DATA=2,ENC_DEBUG="debug",ENC_WORK="work",ENC_REC="rec",ENC_OBJ="obj",asArray=function(data){return Array.isArray(data)?data:[data]},decodeRecordData=function(encoding,scope,data){const{model,values,updates,pending}=scope;const keyIx=model.keyIx;function fixDateField(fieldType,val){if(model.owner.autoDecodeDates&&fieldType===2&&typeof val==="string"){if(Date.create!=null){return Date.create(val)}return new Date(val)}return val}if(updates!=null){updates.clear()}if(encoding===ENC_DEBUG){model.fields.forEach((field,i)=>{if(i!==keyIx){const val=data[field.FieldName];if(val!==undefined){const fieldDef=model.fields[i];values[i]=fixDateField(fieldDef.FieldType,val);if(updates!=null){updates.add(fieldDef.FieldName)}if(pending!=null){pending.delete(fieldDef.FieldName)}}}})}else if(data[0]==="R"){const len=model.fields.length;for(let i=0;i<len;i++){const field=model.fields[i];values[i]=fixDateField(field.FieldType,data[i+1]);if(i!==keyIx&&updates!=null){updates.add(field.FieldName)}if(i!==keyIx&&pending!=null){pending.delete(field.FieldName)}}}else if(data[0]==="C"){const len=data.length,fields=model.fields;for(let i=1;i<len;){const ix=data[i++];const val=data[i++];const field=fields[ix];values[ix]=fixDateField(field.FieldType,val);if(ix!==keyIx&&updates!=null){updates.add(field.FieldName)}if(pending!=null){pending.delete(field.FieldName)}}}},decodeRecordKey=function(encoding,model,data){if(encoding===ENC_DEBUG){return data[model.key]}const keyIx=model.keyIx;if(data[0]==="R"){return data[keyIx+1]}let ix,val;for(let i=data.length-1;i>0;){val=data[i--];ix=data[i--];if(ix===keyIx){return val}}return null},DataListPropertyGroup=function DataListPropertyGroup(owner,cfg){const values={};let changes={},_get=function(p){return function(){let v=changes[p];if(v===undefined){v=values[p]}return v}},_set=function(p){return function(val){if(changes[p]!==val){changes[p]=val;owner.fireEvent("property-changed",{name:p,value:val})}}};Object.assign(this,{getChanges(clear=false){const result=changes;if(clear){this.clearChanges()}return result},clearChanges(){Object.assign(values,changes);changes={}},getValues(){return values},update(config){Object.keys(config).forEach(p=>{if(values[p]!==config[p]){values[p]=config[p];if(!Object.hasOwn(this,p)){Object.defineProperty(this,p,{get:_get(p),set:_set(p),configurable:true,enumerable:true})}owner.fireEvent("property-changed",{name:p,value:values[p]})}});changes={}},isChanged(){return Object.keys(changes).length>0}});this.update(cfg)},DataListFieldsAdapter=class DataListFieldsAdapter{constructor(model){model.fields.forEach((field,ix)=>{Object.defineProperty(this,field.FieldName,{set(value){const privateData=this._owner_._private_;const prev=privateData.values[ix];if(value!==prev){if(privateData.changes[ix]!==value){privateData.changes[ix]=value;this._owner_.touch();this._owner_.notifyChange();privateData.model.notifyRecChanged(this._owner_)}}else if(privateData.changes[ix]!=null){privateData.changes[ix]=undefined;this._owner_.touch();this._owner_.notifyChange();privateData.model.notifyRecChanged(this._owner_)}},get(){return this.getByIndex(ix)},enumerable:true,configurable:true})})}getByIndex(ix){if(this._owner_!=null){const privateData=this._owner_._private_,change=privateData.changes[ix];return change!==undefined?change:privateData.values[ix]}}},DataListRecordFactory=function(model){function DataListRecordValues(owner){Object.defineProperty(this,"_owner_",{value:owner,enumerable:false,configurable:true})}DataListRecordValues.prototype=new DataListFieldsAdapter(model);return DataListRecordValues},DataListRecord=function(){const toJson=typeof window!=="undefined"&&window.angular!=null?angular.toJson:JSON.stringify;function isObjectChanged(jsonRef,jsonObj){if(jsonRef!==jsonObj){return!adrem.deepEqual(JSON.parse(jsonRef),JSON.parse(jsonObj))}return false}return class DataListRecord{static __class__="DataListRecord";constructor(model,encoding,cfg){const _private={key:undefined,_new:true,values:[],changes:[],refs:[],updates:model.owner.trackUpdates?new Set:null,pending:null,serverRev:0,model:model};Object.defineProperty(this,"_private_",{enumerable:false,value:_private});Object.defineProperty(this,"events",{enumerable:false,writable:true});Object.defineProperty(this,"local",{enumerable:false,writable:true,configurable:true});Object.defineProperty(this,"values",{enumerable:false,writable:true,configurable:true,value:new model.DataListValues(this)});this.lid=model.owner.lid++;Object.defineProperty(this,"lid",{enumerable:true,value:this.lid});Object.defineProperty(this,"rev",{enumerable:true,get(){return _private.serverRev},set(v){_private.serverRev=v}});const fields=this._private_.model.fields;const updates=_private.updates;const pending=_private.pending;if(encoding===ENC_DEBUG){for(let i=fields.length-1;i>=0;i--){_private.values[i]=cfg[fields[i].FieldName];_private.changes[i]=undefined;if(updates!=null){updates.add(fields[i].FieldName)}if(pending!=null){pending.delete(fields[i].FieldName)}}}else if(encoding===ENC_OBJ){for(let i=fields.length-1;i>=0;i--){_private.values[i]=undefined;_private.changes[i]=cfg[fields[i].FieldName];if(i===this._private_.model.keyIx){_private.values[i]=_private.changes[i]}else{if(updates!=null){updates.add(fields[i].FieldName)}if(pending!=null){pending.delete(fields[i].FieldName)}}}}else if(encoding===ENC_REC){for(let i=fields.length-1;i>=0;i--){_private.values[i]=cfg._private_.values[i];_private.changes[i]=cfg._private_.changes[i];if(updates!=null){updates.add(fields[i].FieldName)}if(pending!=null){pending.delete(fields[i].FieldName)}}}else{this.update(encoding,cfg)}if(model.owner.objChangeDetection){for(let i=fields.length-1;i>=0;i--){if(_private.changes[i]===undefined){const val=_private.values[i];if(typeof val==="object"){_private.refs.push({ix:i,val:toJson(val)})}}}}_private.key=_private.values[this._private_.model.keyIx];if(this.getKey()!==undefined&&encoding!==ENC_OBJ){_private.changed=_private.model.getChangeStamp();_private.serverRev=_private.changed}else{this.touch()}_private._new=true;this.local=typeof model.owner.LocalData==="function"?new model.owner.LocalData(this,model):{}}setPending(column){if(this._private_.pending==null){this._private_.pending=new Set}this._private_.pending.add(column)}get isNew(){return this._private_._new}get isDeleted(){return this._private_.deleted>0}isPending(column){const pending=this._private_.pending;return pending?.has(column)}get store(){return this._private_.model.owner}getKey(){return this._private_.key}unlink(){if(typeof this.local?.finalize==="function"){this.local.finalize()}delete this.local;delete this.values}setKey(key){if(this._private_.key===undefined){this._private_.values[this._private_.model.keyIx]=key;this._private_.key=key}else{throw new Error("Invalid attempt to change record key.")}}hasKey(){return this._private_.key!==undefined}addEventListener(event,callback,context){if(event==="change"||event==="action"||event==="delete"){if(this.events==null){this.events=new adrem.EventManager}this.events.on(event,callback,context)}else{console.warn("Invalid event",event)}}removeEventListener(event,callback,context){if((event==="change"||event==="delete"||event==="action")&&this.events){this.events.off(event,callback,context)}else{console.warn("Invalid event",event)}}notifyChange(){if(this.events){this.events.fireEvent("change",{type:"change",detail:{item:this}})}}notifyDelete(){if(this.events){this.events.fireEvent("delete",{type:"delete",detail:{item:this}})}}isChanged(since){const _private=this._private_;if(since===undefined){since=_private.serverRev||0}if(_private.model.owner.objChangeDetection){if(_private.refs.length>0){for(let i=_private.refs.length-1;i>=0;i-=1){const ref=_private.refs[i];if(_private.changes[ref.ix]!==undefined){if(!isObjectChanged(ref.val,toJson(_private.changes[ref.ix]))){_private.changes[ref.ix]=undefined}else{_private.refs.splice(i,1)}}else if(isObjectChanged(ref.val,toJson(_private.values[ref.ix]))){_private.changes[ref.ix]=_private.values[ref.ix];_private.refs.splice(i,1);this.touch()}}}}return _private.changed>since}getValues(){function Values(fields,values,changes){for(let i=fields.length-1;i>=0;i--){const value=changes[i];this[fields[i].FieldName]=value!==undefined?value:values[i]}}return new Values(this._private_.model.fields,this._private_.values,this._private_.changes)}entriesOf(){const v=this._private_.values;return this._private_.model.fields.map((field,ix)=>[field.FieldName,v[ix]])}valuesOf(){return this._private_.values}getChanges(){const res={},key=this.getKey(),changes=this._private_.changes,values=this._private_.values;let hasChanges=false;this._private_.model.fields.forEach((field,i)=>{if(field.FieldData.Attributes!==2){if(changes[i]!==undefined){res[field.FieldName]=changes[i];hasChanges=true}else if(key===undefined){res[field.FieldName]=values[i];hasChanges=true}}});if(hasChanges){res[this._private_.model.key]=key;return res}return null}updatedColumns(){const updates=this._private_.updates;return updates!=null?Array.from(updates):[]}isUpdated(colNames){const updates=this._private_.updates;if(colNames&&isIterable(colNames)){for(const colName of colNames){if(updates.has(colName)){return true}}return false}return updates!=null?updates.has(colNames):true}getUpdates(){const updates=this._private_.updates;if(updates!=null){return Object.fromEntries(Array.from(updates).map(name=>[name,this.values[name]]))}return Object.fromEntries(this._private_.model.fields.map(f=>[f.FieldName,this.values[f.FieldName]]))}clearChanges(){const _private=this._private_;if(_private.changed>_private.serverRev){for(let i=_private.changes.length-1;i>=0;i--){_private.changes[i]=undefined}_private.changed=_private.serverRev}}remove(){this._private_.model.owner.delByRec(this)}update(encoding,data){decodeRecordData(encoding,this._private_,data);this.clearChanges();this._private_._new=false;this._private_.serverRev=this._private_.model.getChangeStamp();this._private_.changed=this._private_.serverRev;if(this.events){this.notifyChange()}}touch(){this._private_._new=false;this._private_.changed=this._private_.model.getChangeStamp()}}}(),DataListModel=class DataListModel{constructor(owner,data){Object.assign(this,data);this.owner=owner;this.keyIx=-1;this.changeRevision=0;this.DataListValues=new DataListRecordFactory(this);this.keyIx=this.fields.findIndex(f=>f.FieldName===this.key)}finalize(){this.owner=null;delete this.DataListValues}newRecord(encoding,cfg){return new DataListRecord(this,encoding,cfg)}getChangeStamp(){this.changeRevision+=1;return this.changeRevision}notifyRecChanged(rec){this.owner.notifyChanged(rec)}},RemoteDataListStore=function(){return class RemoteDataListStore extends adrem.EventManager{constructor(api,minRefTime,connection){super();this._minRefreshTime=minRefTime!=null&&typeof minRefTime==="number"?minRefTime:1e3;this.data=[];this._map=new Map;this._deleted=[];this._needsRefresh=false;this._fastRefresh=false;this._needsRefreshProperties=false;this._updating=0;this._suppressedChangedNotification=false;this._propertyUpdating=false;this._dataEncoding=adrem.debug?ENC_DEBUG:ENC_WORK;this.LocalData=null;this.objChangeDetection=false;this.autoDecodeDates=false;this.trackUpdates=false;this.lid=1;this.refreshOnInvisible=adrem.isNodeJS;this.refreshEnabled=true;if(connection==null&&typeof minRefTime==="object"){connection=minRefTime}Object.defineProperty(this,"_connection",{value:connection||adrem,enumerable:false});class DataListProperties{constructor(owner){Object.defineProperty(this,"owner",{value:owner,enumerable:false})}beginUpdate(){this.owner._propertyUpdating=true}endUpdate(){this.owner._propertyUpdating=false}}this.properties=new DataListProperties(this);this._remoteData=new this._connection[api].IDataListStore({dataFormat:this._dataEncoding});this._clientServices=this._connection[api].IClientServices;this._connection.Client.on(this._remoteData.id,this._onClientEvent,this);this._connectionServicesId=this._clientServices?.id;if(this._connectionServicesId!=null){this._connection.Client.on(this._connectionServicesId,this._onConnectionEvent,this)}if(!adrem.isNodeJS){adrem.Client.on("$visible",this._onVisibleChanged,this)}if(this.minRefreshTime>=0){this._autoRefresh()}}get minRefreshTime(){return this._minRefreshTime}static runCheckTimer(clientServices){if(this._checkTimer==null){this._checkTimer=new Map}if(!this._checkTimer.has(clientServices)){const checkTimer=setInterval(()=>{if(!this.pending){this.pending=true;clientServices.IsConnected(connected=>{this.pending=false;if(connected){clearInterval(checkTimer);this._checkTimer.delete(clientServices)}},()=>{this.pending=false})}},1e3);this._checkTimer.set(clientServices,checkTimer)}}_onConnectionEvent(e){if(e.eventid===1){if(adrem.isEmbedded){RemoteDataListStore.runCheckTimer(this._clientServices)}}else if(e.eventid===0){if(this.model!=null&&this.tableName){setTimeout(()=>this.open(this.tableName,this.query),2e3)}}}set minRefreshTime(value){this._minRefreshTime=value;if(this.autoTimer==null){this._autoRefresh()}else if(this._minRefreshTime<0||this._minRefreshTime==null){clearTimeout(this.autoTimer);this.autoTimer=null}}_onVisibleChanged(visible){if(visible&&this.autoTimer==null){this._autoRefresh()}}_onClientEvent(e){if(e.eventid===E_DATA_CHANGED){this._needsRefresh=true}else if(e.eventid===E_PROPERTIES_CHANGED){this._needsRefreshProperties=true}else if(e.eventid===E_DATA_CHANGED_WITH_DATA){this._fastRefresh=false;this._doRefresh(e.data)}if(this._fastRefresh){this._fastRefresh=false;this.refresh()}}_scheduleNextRefresh(){if(this.minRefreshTime>0&&this.autoTimer==null){this.autoTimer=setTimeout(()=>{this.autoTimer=null;this._autoRefresh()},Math.max(10,this.minRefreshTime))}}_autoRefresh(){if(this.refreshEnabled&&(this.refreshOnInvisible||adrem.isVisible)){if(this._needsRefresh||this._needsRefreshProperties){this._autoRefreshPending=true;this.refresh(()=>{this._autoRefreshPending=false;this._scheduleNextRefresh()})}this.commitProperties();if(!this._autoRefreshPending){this._scheduleNextRefresh()}}}finalize(){this.minRefreshTime=null;if(!adrem.isNodeJS){adrem.Client.un("$visible",this._onVisibleChanged,this)}if(this._remoteData!=null){this._connection.Client.un(this._remoteData.id,this._onClientEvent,this);this._remoteData.destroy();delete this._remoteData}this.deleteProperties();if(this.model!=null){this.model.finalize();delete this.model}super.finalize()}deleteProperties(){Object.keys(this.properties).forEach(key=>{this.fireEvent("property-group-changed",key,{});delete this.properties[key]})}notifyChanged(data){if(this._updating===0){if(data!==undefined){this.fireEvent("record-changed",data);if(this.trackUpdates){[].concat(data).forEach(r=>r._private_.updates.clear())}}this.fireEvent("changed")}else{this._suppressedChangedNotification=true}}notifyDeleted(data){if(this._updating===0){this.fireEvent("record-deleted",data);this.fireEvent("changed")}else if(this._deleted.indexOf(data)<0){this.suppressedDeletes.push(data)}}perform(...args){return this._remoteData.perform(...args)}asyncPerform(...args){return this._remoteData.perform.asTask(...args)}beginUpdate(){if(this._updating===0){this._suppressedChangedNotification=false;this.suppressedDeletes=[];if(this.model!=null){this.updateRevision=this.model.getChangeStamp()-1}}this._updating+=1}endUpdate(force){let changed=[],deleted=[];this._updating-=1;if(this._updating===0&&(this._suppressedChangedNotification||force===true)){if(this.hasListener("record-changed")){changed=this.data.filter(rec=>rec.isChanged(this.updateRevision))}if(this.hasListener("record-deleted")){deleted=this._deleted.filter(rec=>rec._private_.deleted>this.updateRevision);deleted=deleted.concat(this.suppressedDeletes);this.suppressedDeletes=[]}if(changed.length>0){this.notifyChanged(changed)}else{this.notifyChanged()}if(deleted.length>0){this.notifyDeleted(deleted);const _deleted=deleted.filter(rec=>typeof rec.unlink==="function");if(_deleted.length>0){setTimeout(()=>_deleted.forEach(rec=>rec.unlink()),16)}deleted.length=0}}}destroy(){if(this._connectionServicesId!=null){this._connection.Client.off(this._connectionServicesId,this._onConnectionEvent,this)}if(this._remoteData){this._connection.Client.off(this._remoteData.id,this._onClientEvent,this)}this.minRefreshTime=-1;this.close();this.finalize()}close(force){if(this.tableName){force=force!=null?force:true;if(this.model!==undefined){this.model.finalize();delete this.model}if(force&&this._remoteData!=null){this._remoteData.close()}this.deleteProperties();this.data.length=0;this._map.clear();this.fireEvent("clear");this.fireEvent("close");this.tableName=null}}open(tableName,query,callback,scope){query=query||"";this.close(false);this.tableName=tableName;this.query=query;this._firstLoad=true;this._remoteData.open(tableName,query,function(response){if(response==null){console.error("Can't open table: ",tableName);if(callback!=null){callback.call(scope,null)}return}if(response.model==null&&response.key!=null||response.fields!=null){response={model:response}}if(response.model?.fields!=null){const model=response.model;if(!Array.isArray(model.fields)){model.fields=[model.fields]}this.model=new DataListModel(this,model);this.fireEvent("model-changed")}scope=scope||this;if(response.data!=null){if(typeof callback==="function"){callback.call(scope,this.data)}if(response.data.updates!=null){this._needsRefresh=false;this._doRefresh(response.data)}this.fireEvent("open",this);this.notifyChanged()}else{this._needsRefresh=true;this.refresh(function(){if(typeof callback==="function"){callback.call(scope,this.data)}this.fireEvent("open",this);this.notifyChanged()})}if(response.properties!=null){this._doUpdateProperties(response.properties)}else{this.readProperties(true)}},this)}getValues(){return this.data.map(rec=>rec.getValues())}getByKey(key){return this._map.get(key)}delByIndex(ix,count){if(ix<this.data.length){let startIx=ix+count;if(startIx>=this.data.length){startIx=this.data.length-1}for(let i=startIx;i>=ix;i-=1){this.delByRec(this.data[i])}}}delByRec(rec,permanent=false){if(rec!==undefined){const key=rec.getKey();if(key!=null){this._map.delete(key)}this.data.splice(this.data.indexOf(rec),1);if(key!==undefined&&!permanent){rec._private_.deleted=this.model.getChangeStamp();this._deleted.push(rec)}rec.notifyDelete();this.notifyDeleted(rec);this.notifyChanged()}}delByKey(key){if(key!==undefined){this.delByRec(this._map.get(key))}}addRecord(rec){this.data.push(rec);if(rec.getKey()!==undefined){this._map.set(rec.getKey(),rec)}rec._private_._new=true;this.notifyChanged(rec);return rec}getRecCopy(rec){const newRec=this.model.newRecord(ENC_REC,rec);if(this.trackUpdates){newRec._private_.updates.clear()}return newRec}add(cfg){return this.addRecord(this.model.newRecord(ENC_OBJ,cfg))}clear(callback){this.revert();this._remoteData.clear(()=>{const deleted=this.data.slice();this.data.length=0;this._map.clear();this._deleted.length=0;if(deleted.length>0){this.notifyDeleted(deleted);this.notifyChanged()}this.fireEvent("clear",this);if(typeof callback==="function"){callback()}},err=>{if(typeof callback==="function"){callback(err)}})}_doUpdateProperties(properties){if(Array.isArray(properties)){properties.forEach(prop=>{if(!Object.hasOwn(this.properties,prop.group)){this.properties[prop.group]=new DataListPropertyGroup(this,prop.properties)}else{this.properties[prop.group].update(prop.properties)}this.fireEvent("property-group-changed",prop.group,this.properties[prop.group])})}}readProperties(doRead){if(doRead&&this._remoteData!=null){this._needsRefreshProperties=false;this._remoteData.getProperties(data=>this._doUpdateProperties(data))}}commitProperties(){if(this._propertyUpdating===false){const changes=Object.entries(this.properties).filter(([,v])=>v?.getChanges&&v?.isChanged()).map(([group,v])=>({group:group,properties:v.getChanges(true)}));if(changes.length>0){this._remoteData.setProperties(changes)}}}refresh(callback){this.readProperties(this._needsRefreshProperties);if(this._needsRefresh){this._needsRefresh=false;if(this._remoteData!=null){this._remoteData.refresh(data=>{this._doRefresh(data);if(typeof callback==="function"){callback.call(this)}},err=>{if(typeof callback==="function"){callback.call(this,err)}})}}else{this._fastRefresh=true;if(typeof callback==="function"){callback.call(this)}}}_internalDoRefresh(data){const delMap=new Map,delKeys=[];if(data.reload){this.data.length=0;this._map.clear()}if(this._deleted.length>0){this._deleted.forEach((rec,i)=>delMap.set(rec.getKey(),i))}if(data.updates!==undefined&&this.model!=null){const updates=Array.isArray(data.updates)?data.updates:[data.updates];for(let i=updates.length-1;i>=0;i--){const newRec=updates[i];const key=decodeRecordKey(this._dataEncoding,this.model,newRec);const oldRec=this._map.get(key);if(oldRec!==undefined){oldRec.update(this._dataEncoding,newRec);this.notifyChanged(oldRec)}else{const ix=delMap.get(key);if(ix!==undefined){this._deleted[ix].update(this._dataEncoding,newRec)}else{this.addRecord(this.model.newRecord(this._dataEncoding,newRec))}}}}if(data.deletes!==undefined){const updates=Array.isArray(data.deletes)?data.deletes:[data.deletes];for(let i=updates.length-1;i>=0;i--){const key=updates[i];const rec=this._map.get(key);if(rec!==undefined){this.delByRec(this._map.get(key),true)}else{const ix=delMap.get(key);if(ix!==undefined){delKeys.push(ix)}}if(delKeys.length>0){delKeys.sort((a,b)=>b-a);delKeys.forEach(ix=>this._deleted.splice(ix,1))}}}if(data.reload){this.fireEvent("reload")}}_doRefresh(data){if(data?.success){this.beginUpdate();if(data.fields!=null){if(this.model!=null){this.model.finalize();delete this.model}if(!Array.isArray(data.fields)){data.fields=[data.fields]}this.model=new DataListModel(this,{key:data.key,fields:data.fields});this.fireEvent("model-changed")}try{this._internalDoRefresh(data)}finally{this.endUpdate(true);if(this._firstLoad){this._firstLoad=false;this.fireEvent("loaded")}if(data.markers!=null){asArray(data.markers).forEach(m=>this.fireEvent("change-marker",m))}}}}getLocalChanges(){const result={changes:[]};result.changedRecords=this.data.filter(rec=>{if(rec.isChanged()){const changes=rec.getChanges();if(changes!=null){result.changes.push(changes);return true}}return false});result.deleted=this._deleted.map(rec=>rec.getKey());return result}isChanged(){const log=this.getLocalChanges();return log.changes.length+log.deleted.length>0}commitRec(rec,callback){if(typeof rec==="number"){rec=this.getByKey(rec)}if(rec.isChanged()){this._remoteData.update([rec.getChanges()],()=>{if(typeof callback==="function"){callback()}},err=>{if(typeof callback==="function"){callback(err);return true}})}else if(typeof callback==="function"){callback()}}commit(callback){const changeLog=this.getLocalChanges();let changed=false,called=false;this._deleted=[];if(changeLog.deleted.length>0){this._remoteData.remove(changeLog.deleted);changed=true}if(changeLog.changes.length>0){changed=true;called=true;this._remoteData.update(changeLog.changes,function(keys){keys=asArray(keys);changeLog.changedRecords.forEach((crec,i)=>{if(i<keys.length){if(crec.getKey()===undefined){crec.setKey(keys[i]);this._map.set(keys[i],crec)}}});if(typeof callback==="function"){callback()}},err=>{if(typeof callback==="function"){callback(err);return true}},this)}if(changed){this.fireEvent("commit",this);this.refresh()}if(!called&&typeof callback==="function"){callback()}}revert(){for(let i=this.data.length-1;i>=0;i--){if(this.data[i].getKey()===undefined){this.data.splice(i,1)}else if(this.data[i].isChanged()){this.data[i].clearChanges()}}this._deleted.forEach(rec=>{if(rec.isChanged()){rec.clearChanges()}this.addRecord(rec)});this._deleted.length=0;this.fireEvent("revert",this);this.notifyChanged()}}}();adrem.deepEqual=function(){const pSlice=Array.prototype.slice,objectKeys=Object.keys;function isArguments(object){return Object.prototype.toString.call(object)==="[object Arguments]"}function deepEqual(actual,expected,opts){opts=opts||{};if(actual===expected){return true}if(actual instanceof Date&&expected instanceof Date){return actual.getTime()===expected.getTime()}if(!actual||!expected||typeof actual!=="object"&&typeof expected!=="object"){return opts.strict?actual===expected:actual==expected}return objEquiv(actual,expected,opts)}function isUndefinedOrNull(value){return value===null||value===undefined}function isBuffer(x){if(!x||typeof x!=="object"||typeof x.length!=="number"){return false}if(typeof x.copy!=="function"||typeof x.slice!=="function"){return false}return!(x.length>0&&typeof x[0]!=="number")}function objEquiv(a,b,opts){let i,key,ka,kb;if(isUndefinedOrNull(a)||isUndefinedOrNull(b)){return false}if(a.prototype!==b.prototype){return false}if(isArguments(a)){if(!isArguments(b)){return false}a=pSlice.call(a);b=pSlice.call(b);return deepEqual(a,b,opts)}if(isBuffer(a)){if(!isBuffer(b)){return false}if(a.length!==b.length){return false}for(i=0;i<a.length;i++){if(a[i]!==b[i]){return false}}return true}try{ka=objectKeys(a);kb=objectKeys(b)}catch(e){return false}if(ka.length!==kb.length){return false}ka.sort();kb.sort();for(i=ka.length-1;i>=0;i--){if(ka[i]!==kb[i]){return false}}for(i=ka.length-1;i>=0;i--){key=ka[i];if(!deepEqual(a[key],b[key],opts)){return false}}return typeof a===typeof b}return deepEqual}();adrem.RemoteDataListStore=RemoteDataListStore;if(typeof module==="object"){module.exports=RemoteDataListStore}});