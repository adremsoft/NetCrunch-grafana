{"version":3,"sources":["../../../../../../src/datasource/services/netCrunchAPI/netCrunchConnection/networkData/networkData.js"],"names":["NetCrunchNetworkData","adremClient","netCrunchConnection","openRemoteData","table","query","processFunction","notifyFunction","dataList","RemoteDataListStore","netCrunchServerConnection","self","Promise","resolve","on","data","length","forEach","open","processHostsData","nodeRec","networkAtlas","addNode","processMapData","mapRec","addMap","getAccessRightsParameters","userProfile","$children","reduce","result","current","$tag","accessProfileId","ACProfileId","orgId","serverConnection","NetCrunchNetworkAtlas","nodesReady","networksReady","remoteDataInitialized","promise","nodes","networks","atlas","all","then","init","hostsData","networkData","onNodesChanged","atlasMaps","onNetworksChanged"],"mappings":"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","file":"networkData.js","sourcesContent":["/**\r\n * @license\r\n * Copyright AdRem Software. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an Apache License, Version 2.0 that can be\r\n * found in the LICENSE file.\r\n */\r\n\r\n/* eslint-disable func-names, object-shorthand, prefer-template */\r\n\r\nimport { NetCrunchNetworkAtlas } from './networkAtlas';\r\n\r\nfunction NetCrunchNetworkData(adremClient, netCrunchConnection) {\r\n\r\n  const\r\n    netCrunchServerConnection = netCrunchConnection.serverConnection,\r\n    networkAtlas = new NetCrunchNetworkAtlas(netCrunchServerConnection),\r\n    nodesReady = {},\r\n    networksReady = {};\r\n\r\n  let remoteDataInitialized = null;\r\n\r\n  nodesReady.promise = new Promise(resolve => (nodesReady.resolve = resolve));\r\n  networksReady.promise = new Promise(resolve => (networksReady.resolve = resolve));\r\n\r\n  function openRemoteData(table, query, processFunction, notifyFunction) {\r\n    const\r\n      dataList = new adremClient.RemoteDataListStore('ncSrv', 1000, netCrunchServerConnection),\r\n      self = this;\r\n\r\n    return new Promise((resolve) => {\r\n      if (typeof processFunction === 'function') {\r\n        dataList.on('record-changed', (data) => {\r\n          if ((dataList.data != null) && (dataList.data.length > 0)) {\r\n            data.forEach(processFunction, self);\r\n          }\r\n        });\r\n      }\r\n\r\n      if (typeof notifyFunction === 'function') {\r\n        dataList.on('changed', () => {\r\n          notifyFunction();\r\n        });\r\n      }\r\n\r\n      dataList.open(table, query, () => resolve());\r\n    });\r\n  }\r\n\r\n  function processHostsData(nodeRec) {\r\n    networkAtlas.addNode(nodeRec);\r\n  }\r\n\r\n  function processMapData(mapRec) {\r\n    networkAtlas.addMap(mapRec);\r\n  }\r\n\r\n  function getAccessRightsParameters(userProfile) {\r\n    return userProfile.$children.reduce((result, current) => {\r\n      if (current.$tag === 'User') {\r\n        return {\r\n          accessProfileId: current.ACProfileId,\r\n          orgId: current.orgId\r\n        };\r\n      }\r\n      return result;\r\n    }, {});\r\n  }\r\n\r\n  return {\r\n    nodes: () => nodesReady.promise,\r\n    networks: () => networksReady.promise,\r\n    atlas: () => Promise\r\n      .all([nodesReady.promise, networksReady.promise])\r\n      .then(() => networkAtlas),\r\n\r\n    init() {\r\n      const\r\n        self = this,\r\n        { accessProfileId, orgId } = getAccessRightsParameters(netCrunchConnection.userProfile),\r\n\r\n        PERFORMANCE_VIEWS_NET_INT_ID = 2,\r\n        HOSTS_QUERY = 'Select Id, Name, Address, DeviceType, GlobalDataNode' +\r\n                      ' where CanAccessNode(Id, \\'' + accessProfileId + ':' + orgId + '\\')',\r\n        NETWORKS_QUERY = 'Select NetIntId, DisplayName, HostMapData, IconId, MapType, NetworkData, MapClassTag ' +\r\n                         'where (MapClassTag != \\'pnet\\') && (MapClassTag != \\'dependencynet\\') && ' +\r\n                               '(MapClassTag != \\'issuesnet\\') && (MapClassTag != \\'all\\') && ' +\r\n                               '(NetIntId != ' + PERFORMANCE_VIEWS_NET_INT_ID + ')';\r\n\r\n      let\r\n        hostsData,\r\n        networkData;\r\n\r\n      function hostsChanged() {\r\n        nodesReady.resolve(networkAtlas.nodes);\r\n        if (typeof self.onNodesChanged === 'function') {\r\n          self.onNodesChanged();\r\n        }\r\n      }\r\n\r\n      function networksChanged() {\r\n        networksReady.resolve(networkAtlas.atlasMaps);\r\n\r\n        if (typeof self.onNetworksChanged === 'function') {\r\n          self.onNetworksChanged();\r\n        }\r\n      }\r\n\r\n      if (remoteDataInitialized != null) {\r\n        return remoteDataInitialized;\r\n      }\r\n\r\n      // eslint-disable-next-line\r\n      hostsData = openRemoteData('Hosts', HOSTS_QUERY, processHostsData, hostsChanged);\r\n\r\n      // eslint-disable-next-line\r\n      networkData = openRemoteData('Networks', NETWORKS_QUERY, processMapData, networksChanged);\r\n\r\n      remoteDataInitialized = Promise.all([hostsData, networkData]);\r\n\r\n      return remoteDataInitialized;\r\n    }\r\n  };\r\n}\r\n\r\nexport {\r\n  NetCrunchNetworkData\r\n};\r\n"]}