{"version":3,"sources":["../../../../../src/datasource/services/netCrunchAPI/netCrunchConnection/connection.js"],"names":["NetCrunchNetworkData","NetCrunchCountersData","NetCrunchTrendData","NETCRUNCH_TREND_DATA_CONST","CONNECTION_CONSTS","API_NAME","NC_SERVER_VER_MAJOR","NC_SERVER_VER_MINOR","STATUS_OK","ERROR_SERVER_API","ERROR_SERVER_VER","ERROR_CONNECTION_INIT","ERROR_AUTHENTICATION","ERROR_MESSAGES","NetCrunchConnection","adrem","serverURL","connectionName","apiName","apiURL","serverConnection","serverConnectionReady","netCrunchClient","trendQuery","loginInProgress","loginInProgressPromise","networkAtlas","Map","networkAtlasReady","Promise","resolve","networkAtlasReadyResolve","counters","trends","userName","password","nodesChanged","onNodesChanged","networksChanged","onNetworksChanged","getUserProfileData","self","ncSrv","ICurrentUserProfile","GetProfileData","userProfile","ignoreDownloadNetworkAtlas","establishConnection","then","authenticateUser","adremClient","bind","init","reloadOnLogout","logout","catch","reject","Connection","useWebSocket","pageUrl","Client","urlFilter","url","replace","on","e","onError","message","start","status","loginTimeout","attempt","MAX_LOGIN_ATTEMPTS","BASE_LOGIN_TIMEOUT","tryAuthenticate","applicationLogin","JSON","stringify","user","application","login","setTimeout","loginProcess","loggedIn","logged","ITrendQuery","callApi","AnalyzeGetData","arguments","apiCall","args","acceptEmpty","Array","prototype","slice","call","apply","concat","data","serverApi","parseVersion","version","versionPattern","versionElements","exec","major","minor","bugfix","text","versionGreaterEqualThan","result","parseInt","createResult","api","ver","minMajor","minMinor"],"mappings":"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","file":"connection.js","sourcesContent":["/**\r\n * @license\r\n * Copyright AdRem Software. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an Apache License, Version 2.0 that can be\r\n * found in the LICENSE file.\r\n */\r\n\r\nimport { NetCrunchNetworkData } from './networkData/networkData';\r\nimport { NetCrunchCountersData } from './countersData';\r\nimport { NetCrunchTrendData, NETCRUNCH_TREND_DATA_CONST } from './trendData';\r\n\r\nconst\r\n  CONNECTION_CONSTS = {\r\n    API_NAME: '/ncapi/',\r\n\r\n    NC_SERVER_VER_MAJOR: 10,\r\n    NC_SERVER_VER_MINOR: 0,\r\n\r\n    STATUS_OK: 0,\r\n    ERROR_SERVER_API: 1,\r\n    ERROR_SERVER_VER: 2,\r\n    ERROR_CONNECTION_INIT: 3,\r\n    ERROR_AUTHENTICATION: 4,\r\n    ERROR_MESSAGES: [\r\n      '',\r\n      'Server connection failed',\r\n      'NetCrunch server version should be 10.0 or greater',\r\n      'Server connection initialization failed',\r\n      'Authentication failed'\r\n    ]\r\n  };\r\n\r\nclass NetCrunchConnection {\r\n  constructor(adrem, serverURL, connectionName) {\r\n    this.adrem = adrem;\r\n    this.apiName = CONNECTION_CONSTS.API_NAME;\r\n    this.apiURL = serverURL + this.apiName;\r\n    this.connectionName = connectionName;\r\n    this.serverConnection = null;\r\n    this.serverConnectionReady = null;\r\n    this.netCrunchClient = null;\r\n    this.trendQuery = null;\r\n    this.loginInProgress = false;\r\n    this.loginInProgressPromise = null;\r\n    this.networkAtlas = new Map();\r\n    this.networkAtlasReady = new Promise((resolve) => { this.networkAtlasReadyResolve = resolve; });\r\n    this.counters = new Map();\r\n    this.trends = null;\r\n  }\r\n\r\n  static checkApiVersion(serverApi) {\r\n\r\n    function parseVersion(version) {\r\n      const\r\n        versionPattern = /^(\\d+).(\\d+).(\\d+)(.(\\d+))*$/,\r\n        versionElements = versionPattern.exec(version);\r\n\r\n      if (versionElements != null) {\r\n        return {\r\n          major: versionElements[1],\r\n          minor: versionElements[2],\r\n          bugfix: versionElements[3],\r\n          text: version\r\n        };\r\n      }\r\n\r\n      return null;\r\n    }\r\n\r\n    function versionGreaterEqualThan(version, major, minor) {\r\n      let result = false;\r\n\r\n      if (parseInt(version.major, 10) >= parseInt(major, 10)) {\r\n        if (parseInt(version.major, 10) > parseInt(major, 10)) {\r\n          result = true;\r\n        } else if (parseInt(version.minor, 10) >= parseInt(minor, 10)) {\r\n          result = true;\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    function createResult(status, version = null) {\r\n      return {\r\n        status,\r\n        version\r\n      };\r\n    }\r\n\r\n    if ((serverApi.api != null) && (serverApi.api[0] != null) && (serverApi.api[0].ver != null)) {\r\n      const\r\n        minMajor = CONNECTION_CONSTS.NC_SERVER_VER_MAJOR,\r\n        minMinor = CONNECTION_CONSTS.NC_SERVER_VER_MINOR,\r\n        version = parseVersion(serverApi.api[0].ver);\r\n\r\n      if (version != null) {\r\n        if (versionGreaterEqualThan(version, minMajor, minMinor)) {\r\n          return createResult(CONNECTION_CONSTS.STATUS_OK, version);\r\n        }\r\n        return createResult(CONNECTION_CONSTS.ERROR_SERVER_VER, version);\r\n      }\r\n      return createResult(CONNECTION_CONSTS.ERROR_SERVER_VER);\r\n    }\r\n    return createResult(CONNECTION_CONSTS.ERROR_SERVER_VER);\r\n  }\r\n\r\n  login(userName, password, ignoreDownloadNetworkAtlas = false) {\r\n    const self = this;\r\n\r\n    function nodesChanged() {\r\n      if (typeof this.onNodesChanged === 'function') {\r\n        this.onNodesChanged();\r\n      }\r\n    }\r\n\r\n    function networksChanged() {\r\n      if (typeof this.onNetworksChanged === 'function') {\r\n        this.onNetworksChanged();\r\n      }\r\n    }\r\n\r\n    function getUserProfileData() {\r\n      return new Promise(resolve =>\r\n        self.serverConnection.ncSrv.ICurrentUserProfile.GetProfileData(userProfile =>\r\n          resolve(userProfile)));\r\n    }\r\n\r\n    if (this.serverConnection == null) {\r\n      this.serverConnectionReady = this.establishConnection();\r\n    }\r\n\r\n    return this.serverConnectionReady\r\n      .then(() =>\r\n        this.authenticateUser(userName, password)\r\n          .then(() => getUserProfileData())\r\n          .then((userProfile) => {\r\n            this.userProfile = userProfile;\r\n            this.networkAtlas = new NetCrunchNetworkData(this.adremClient, this);\r\n            this.networkAtlas.onNodesChanged = nodesChanged.bind(this);\r\n            this.networkAtlas.onNetworksChanged = networksChanged.bind(this);\r\n            this.counters = new NetCrunchCountersData(this.adremClient, this.serverConnection);\r\n            this.trends = new NetCrunchTrendData(this);\r\n\r\n            if (ignoreDownloadNetworkAtlas !== true) {\r\n              this.networkAtlas.init()\r\n                .then(() => {\r\n                  this.networkAtlasReadyResolve(this.networkAtlas);\r\n                });\r\n            }\r\n            return true;\r\n          })\r\n      );\r\n  }\r\n\r\n  logout() {\r\n    const self = this;\r\n    return new Promise((resolve) => {\r\n      if (self.serverConnectionReady != null) {\r\n        self.serverConnectionReady\r\n          .then(() => {\r\n            self.serverConnection.reloadOnLogout = false;\r\n            self.netCrunchClient.logout(() => {\r\n              resolve();\r\n            });\r\n          })\r\n          .catch(() => {\r\n            resolve();\r\n          });\r\n      } else {\r\n        resolve();\r\n      }\r\n    });\r\n  }\r\n\r\n  establishConnection() {\r\n    const self = this;\r\n    return new Promise((resolve, reject) => {\r\n      self.adrem.then((adrem) => {\r\n        const\r\n          apiName = self.apiName,\r\n          apiURL = self.apiURL;\r\n\r\n        self.adremClient = adrem;\r\n\r\n        self.serverConnection = new adrem.Connection(apiURL);\r\n        self.serverConnection.useWebSocket = false;\r\n        self.serverConnection.pageUrl = '/';\r\n        self.serverConnection.reloadOnLogout = true;\r\n\r\n        self.netCrunchClient = self.serverConnection.Client;\r\n\r\n        self.netCrunchClient.urlFilter = url => apiURL + url.replace(apiName, '');\r\n\r\n        self.netCrunchClient.on('exception', (e) => {\r\n          if (typeof self.onError === 'function') {\r\n            self.onError({\r\n              connectionName: self.connectionName,\r\n              message: e.message\r\n            });\r\n          }\r\n        });\r\n\r\n        self.netCrunchClient.start('', (status) => {\r\n          if (status.init === true) {\r\n            resolve();\r\n          } else {\r\n            reject(CONNECTION_CONSTS.ERROR_CONNECTION_INIT);\r\n          }\r\n        });\r\n\r\n      });\r\n    });\r\n  }\r\n\r\n  authenticateUser(userName, password) {\r\n    const\r\n      MAX_LOGIN_ATTEMPTS = 3,\r\n      BASE_LOGIN_TIMEOUT = 5000,\r\n      netCrunchClient = this.netCrunchClient;\r\n    let loginProcess;\r\n\r\n    function loginTimeout(attempt) {\r\n      return ((MAX_LOGIN_ATTEMPTS - attempt) + 1) * BASE_LOGIN_TIMEOUT;\r\n    }\r\n\r\n    function tryAuthenticate(userName, password, attempt) {           // eslint-disable-line\r\n      return new Promise((resolve, reject) => {\r\n        const applicationLogin = JSON.stringify({ user: userName, application: 'GrafCrunch' });\r\n        netCrunchClient.login(applicationLogin, password, (status) => {\r\n          if (status === true) {\r\n            resolve();\r\n          } else if (attempt > 1) {\r\n            setTimeout(() => {\r\n              tryAuthenticate(userName, password, attempt - 1)\r\n                .then(() => { resolve(); })\r\n                .catch(() => { reject(); });\r\n            }, loginTimeout(attempt));\r\n          } else {\r\n            reject();\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    if (this.loggedIn() === false) {\r\n      if (this.loginInProgress === false) {\r\n        const self = this;\r\n        this.loginInProgress = true;\r\n        loginProcess = new Promise((resolve, reject) => {\r\n          tryAuthenticate(userName, password, MAX_LOGIN_ATTEMPTS)\r\n            .then(() => {\r\n              self.loginInProgress = false;\r\n              self.loginInProgressPromise = null;\r\n              resolve();\r\n            })\r\n            .catch(() => {\r\n              self.loginInProgress = false;\r\n              self.loginInProgressPromise = null;\r\n              reject(CONNECTION_CONSTS.ERROR_AUTHENTICATION);\r\n            });\r\n        });\r\n        this.loginInProgressPromise = loginProcess;\r\n      } else {\r\n        loginProcess = this.loginInProgressPromise;\r\n      }\r\n    } else {\r\n      loginProcess = Promise.resolve();\r\n    }\r\n    return loginProcess;\r\n  }\r\n\r\n  loggedIn() {\r\n    return ((this.netCrunchClient != null) && ('Session' in this.netCrunchClient) &&\r\n            (this.netCrunchClient.status.logged === true));\r\n  }\r\n\r\n  queryTrendData() {\r\n    if (this.trendQuery == null) {\r\n      this.trendQuery = new this.serverConnection.ncSrv.ITrendQuery();\r\n    }\r\n    return this.callApi(this.trendQuery.AnalyzeGetData, arguments);       // eslint-disable-line\r\n  }\r\n\r\n  callApi(apiCall, args, acceptEmpty = true) {\r\n    const self = this;\r\n    return new Promise((resolve, reject) => {\r\n      // eslint-disable-next-line\r\n      args = Array.prototype.slice.call(args, 0);   // convert arguments to Array\r\n      apiCall.apply(self, args.concat([(data) => {\r\n        if ((data !== undefined) || acceptEmpty) {\r\n          resolve(data);\r\n        } else {\r\n          reject();\r\n        }\r\n      }]));\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport {\r\n  CONNECTION_CONSTS,\r\n  NETCRUNCH_TREND_DATA_CONST,\r\n  NetCrunchConnection\r\n};\r\n"]}