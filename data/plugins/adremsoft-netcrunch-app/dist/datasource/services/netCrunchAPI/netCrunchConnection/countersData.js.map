{"version":3,"sources":["../../../../../src/datasource/services/netCrunchAPI/netCrunchConnection/countersData.js"],"names":["NetCrunchCountersData","adremClient","netCrunchServerConnection","addCountersToCache","nodeId","countersQuery","cache","addToCache","COUNTERS_CACHE_SECTION","getCountersFromCache","getFromCache","addDisplayCounterPathToCache","counterPath","displayCounterPathQuery","COUNTERS_PATH_CACHE_SECTION","getDisplayCounterPathFromCache","addMonitorsToCache","monitorsQuery","MONITORS_CACHE_SECTION","getMonitorsFromCache","ncCounters","NetCrunchCounters","counterConsts","NETCRUNCH_COUNTER_CONST","NetCrunchSessionCache","trendDB","trendDBReadyResolve","trendDBReadyReject","trendDBReady","Promise","resolve","reject","monitorMgrInf","monitorMgrInfReadyResolve","monitorMgrInfReadyReject","monitorMgrInfReady","addSection","prepareCountersForMonitors","counters","createCounterObject","counter","fromCache","self","convertCounterPathToDisplay","then","displayName","name","compareCounters","counterA","counterB","sortCounters","monitors","Object","keys","forEach","monitorId","sort","updateMonitorNames","getMonitors","monitorsMap","counterGroup","counterPromises","create","push","all","getCounters","NetCrunch","TrendDB","status","machineId","map","split","parsedCounterPath","parseCounterPath","counterPathObject","counterPathToDisplayQuery","isMIBCnt","obj","cnt","CNT_TYPE","cstMIB","counterPathToDisplayStr","MonitorMgrIntf","getMonitorsInfo","monitor","getCountersForMonitors","getCountersTable","countersTable","monitorID","concat","table","findCounterByName","counterName","foundCounter","some"],"mappings":"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","file":"countersData.js","sourcesContent":["/**\r\n * @license\r\n * Copyright AdRem Software. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an Apache License, Version 2.0 that can be\r\n * found in the LICENSE file.\r\n */\r\n\r\n/* eslint-disable no-shadow, no-param-reassign, object-shorthand, func-names */\r\n\r\nimport { NetCrunchCounters, NETCRUNCH_COUNTER_CONST } from '../adrem/module';\r\nimport { NetCrunchSessionCache } from './sessionCache';\r\n\r\nfunction NetCrunchCountersData(adremClient, netCrunchServerConnection) {\r\n\r\n  const\r\n    COUNTERS_CACHE_SECTION = 'counters',\r\n    COUNTERS_PATH_CACHE_SECTION = 'countersPath',\r\n    MONITORS_CACHE_SECTION = 'monitors',\r\n    ncCounters = new NetCrunchCounters(adremClient, netCrunchServerConnection),\r\n    counterConsts = NETCRUNCH_COUNTER_CONST,\r\n    cache = new NetCrunchSessionCache();\r\n\r\n  let\r\n    trendDB = null,\r\n    trendDBReadyResolve,\r\n    trendDBReadyReject,\r\n    trendDBReady = new Promise((resolve, reject) => {         // eslint-disable-line\r\n      trendDBReadyResolve = resolve;\r\n      trendDBReadyReject = reject;\r\n    }),\r\n    monitorMgrInf = null,\r\n    monitorMgrInfReadyResolve,\r\n    monitorMgrInfReadyReject,\r\n    monitorMgrInfReady = new Promise((resolve, reject) => {   // eslint-disable-line\r\n      monitorMgrInfReadyResolve = resolve;\r\n      monitorMgrInfReadyReject = reject;\r\n    });\r\n\r\n  cache.addSection(COUNTERS_CACHE_SECTION);\r\n  cache.addSection(COUNTERS_PATH_CACHE_SECTION);\r\n  cache.addSection(MONITORS_CACHE_SECTION);\r\n\r\n  function addCountersToCache(nodeId, countersQuery) {\r\n    cache.addToCache(COUNTERS_CACHE_SECTION, nodeId, countersQuery);\r\n  }\r\n\r\n  function getCountersFromCache(nodeId) {\r\n    return cache.getFromCache(COUNTERS_CACHE_SECTION, nodeId);\r\n  }\r\n\r\n  function addDisplayCounterPathToCache(counterPath, displayCounterPathQuery) {\r\n    cache.addToCache(COUNTERS_PATH_CACHE_SECTION, counterPath, displayCounterPathQuery);\r\n  }\r\n\r\n  function getDisplayCounterPathFromCache(counterPath) {\r\n    return cache.getFromCache(COUNTERS_PATH_CACHE_SECTION, counterPath);\r\n  }\r\n\r\n  function addMonitorsToCache(monitorsQuery) {\r\n    cache.addToCache(MONITORS_CACHE_SECTION, MONITORS_CACHE_SECTION, monitorsQuery);\r\n  }\r\n\r\n  function getMonitorsFromCache() {\r\n    return cache.getFromCache(MONITORS_CACHE_SECTION, MONITORS_CACHE_SECTION);\r\n  }\r\n\r\n  return {\r\n\r\n    prepareCountersForMonitors: function(counters, fromCache = true) {\r\n      const\r\n        counterPromises = [],\r\n        self = this;\r\n\r\n      let monitors = Object.create(null);\r\n\r\n      function createCounterObject(counter, fromCache) {\r\n        return self.convertCounterPathToDisplay(counter[1], fromCache)\r\n          .then((displayName) => {              // eslint-disable-line\r\n            return {\r\n              name: counter[1],\r\n              displayName\r\n            };\r\n          });\r\n      }\r\n\r\n      function compareCounters(counterA, counterB) {\r\n        if (counterA.displayName < counterB.displayName) { return -1; }\r\n        if (counterA.displayName > counterB.displayName) { return 1; }\r\n        if (counterA.displayName === counterB.displayName) { return 0; }\r\n        return 0;\r\n      }\r\n\r\n      function sortCounters(monitors) {\r\n        Object.keys(monitors).forEach((monitorId) => {\r\n          monitors[monitorId].counters.sort(compareCounters);\r\n        });\r\n        return monitors;\r\n      }\r\n\r\n      function updateMonitorNames(monitors, fromCache) {\r\n        return self.getMonitors(fromCache)\r\n          .then((monitorsMap) => {\r\n            Object.keys(monitors).forEach((monitorId) => {\r\n              if (monitorsMap[monitorId] != null) {\r\n                monitors[monitorId].name = monitorsMap[monitorId].counterGroup;\r\n              }\r\n            });\r\n            return monitors;\r\n          });\r\n      }\r\n\r\n      counters.forEach((counter) => {\r\n        if (monitors[counter[0]] == null) {\r\n          monitors[counter[0]] = Object.create(null);\r\n          monitors[counter[0]].counters = [];\r\n        }\r\n\r\n        monitors[counter[0]].counters.push(createCounterObject(counter, fromCache));\r\n      });\r\n\r\n      Object.keys(monitors).forEach((monitorId) => {\r\n        counterPromises.push(\r\n          Promise.all(monitors[monitorId].counters)\r\n            .then((counters) => {\r\n              monitors[monitorId].counters = counters;\r\n            })\r\n        );\r\n      });\r\n\r\n      return Promise.all(counterPromises)\r\n        .then(() => {\r\n          monitors = sortCounters(monitors);\r\n          return updateMonitorNames(monitors, fromCache);\r\n        });\r\n    },\r\n\r\n    getCounters: function(nodeId, fromCache = true) {\r\n      let countersQuery;\r\n\r\n      countersQuery = (fromCache) ? getCountersFromCache(nodeId) : null;\r\n\r\n      if (countersQuery == null) {\r\n        if (trendDB == null) {\r\n          trendDB = new adremClient.NetCrunch.TrendDB('ncSrv', '', (status) => {\r\n            if (status === true) {\r\n              trendDBReadyResolve();\r\n            } else {\r\n              trendDBReadyReject();\r\n            }\r\n          }, netCrunchServerConnection);\r\n        }\r\n\r\n        countersQuery = trendDBReady\r\n          .then(() =>\r\n            new Promise((resolve) => {\r\n              trendDB.getCounters({ machineId: nodeId }, (counters) => {\r\n\r\n                // counters are in form [ \"<monitorId>=<counter>\", ... ]\r\n\r\n                counters = counters.map(counter => counter.split('='));\r\n                resolve(counters);\r\n              });\r\n            })\r\n          );\r\n        addCountersToCache(nodeId, countersQuery);\r\n      }\r\n      return countersQuery;\r\n    },\r\n\r\n    convertCounterPathToDisplay: function(counterPath, fromCache = true) {\r\n      const parsedCounterPath = ncCounters.parseCounterPath(counterPath);\r\n      let\r\n        counterPathObject,\r\n        counterPathToDisplayQuery;\r\n\r\n      counterPathToDisplayQuery = (fromCache) ? getDisplayCounterPathFromCache(counterPath) : null;\r\n\r\n      if (counterPathToDisplayQuery == null) {\r\n        if (ncCounters.isMIBCnt(parsedCounterPath.obj, parsedCounterPath.cnt) === true) {\r\n          counterPathObject = ncCounters.counterPathObject(counterPath, counterConsts.CNT_TYPE.cstMIB);\r\n          counterPathToDisplayQuery = ncCounters.counterPathToDisplayStr(counterPathObject, true, true);\r\n        } else {\r\n          counterPathToDisplayQuery = ncCounters.counterPathToDisplayStr(counterPath, true, true);\r\n        }\r\n        addDisplayCounterPathToCache(counterPath, counterPathToDisplayQuery);\r\n      }\r\n      return counterPathToDisplayQuery;\r\n    },\r\n\r\n    getMonitors: function(fromCache = true) {\r\n      let monitorsQuery;\r\n\r\n      monitorsQuery = (fromCache) ? getMonitorsFromCache() : null;\r\n\r\n      if (monitorsQuery == null) {\r\n        if (monitorMgrInf == null) {\r\n          monitorMgrInf = new adremClient.NetCrunch.MonitorMgrIntf('ncSrv', (status) => {\r\n            if (status === true) {\r\n              monitorMgrInfReadyResolve();\r\n            } else {\r\n              monitorMgrInfReadyReject();\r\n            }\r\n          }, netCrunchServerConnection);\r\n        }\r\n\r\n        monitorsQuery = monitorMgrInfReady\r\n          .then(() =>\r\n            new Promise((resolve) => {\r\n              monitorMgrInf.getMonitorsInfo({}, (monitors) => {\r\n                const monitorsMap = Object.create(null);\r\n\r\n                monitors.forEach((monitor) => {\r\n                  monitorsMap[monitor.monitorId] = monitor;\r\n                });\r\n                resolve(monitorsMap);\r\n              });\r\n            })\r\n          );\r\n        addMonitorsToCache(monitorsQuery);\r\n      }\r\n\r\n      return monitorsQuery;\r\n    },\r\n\r\n    getCountersForMonitors: function(nodeId, fromCache) {\r\n\r\n      function getCountersTable(counters) {\r\n        let countersTable = [];\r\n        Object.keys(counters).forEach((monitorID) => {\r\n          if (monitorID > 0) {\r\n            countersTable = countersTable.concat(counters[monitorID].counters);\r\n          }\r\n        });\r\n        return countersTable;\r\n      }\r\n\r\n      return this.getCounters(nodeId, fromCache)\r\n        .then(counters => this.prepareCountersForMonitors(counters, fromCache))\r\n        .then((counters) => {\r\n          counters.table = getCountersTable(counters);\r\n          return counters;\r\n        });\r\n    },\r\n\r\n    findCounterByName: function(counters, counterName) {\r\n      let foundCounter = null;\r\n\r\n      counters.table.some((counter) => {\r\n        if (counter.name === counterName) {\r\n          foundCounter = counter;\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n      return foundCounter;\r\n    }\r\n\r\n  };\r\n}\r\n\r\nexport {\r\n  NetCrunchCountersData\r\n};\r\n"]}