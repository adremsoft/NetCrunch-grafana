{"version":3,"sources":["../../../../../src/datasource/services/netCrunchAPI/netCrunchConnection/countersData.js"],"names":["NetCrunchCountersData","adremClient","netCrunchServerConnection","addCountersToCache","nodeId","countersQuery","cache","addToCache","COUNTERS_CACHE_SECTION","getCountersFromCache","getFromCache","addDisplayCounterPathToCache","counterPath","displayCounterPathQuery","COUNTERS_PATH_CACHE_SECTION","getDisplayCounterPathFromCache","addMonitorsToCache","monitorsQuery","MONITORS_CACHE_SECTION","getMonitorsFromCache","ncCounters","NetCrunchCounters","counterConsts","NETCRUNCH_COUNTER_CONST","NetCrunchSessionCache","addSection","prepareCountersForMonitors","counters","createCounterObject","counter","fromCache","self","convertCounterPathToDisplay","then","displayName","name","compareCounters","counterA","counterB","sortCounters","monitors","Object","keys","forEach","monitorId","sort","updateMonitorNames","getMonitors","monitorsMap","counterGroup","counterPromises","create","push","Promise","all","getCounters","resolve","ncSrv","IRemoteTrendDB","GetCounters","toString","map","c","id","path","parsedCounterPath","parseCounterPath","counterPathObject","counterPathToDisplayQuery","isMIBCnt","obj","cnt","CNT_TYPE","cstMIB","counterPathToDisplayStr","IMonitorsManager","GetMonitors","monitor","getCountersForMonitors","getCountersTable","countersTable","monitorID","concat","table","findCounterByName","counterName","foundCounter","some"],"mappings":"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","file":"countersData.js","sourcesContent":["/**\r\n * @license\r\n * Copyright AdRem Software. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an Apache License, Version 2.0 that can be\r\n * found in the LICENSE file.\r\n */\r\n\r\n/* eslint-disable no-shadow, no-param-reassign, object-shorthand, func-names */\r\n\r\nimport { NetCrunchCounters, NETCRUNCH_COUNTER_CONST } from '../adrem/module';\r\nimport { NetCrunchSessionCache } from './sessionCache';\r\n\r\nfunction NetCrunchCountersData(adremClient, netCrunchServerConnection) {\r\n\r\n  const\r\n    COUNTERS_CACHE_SECTION = 'counters',\r\n    COUNTERS_PATH_CACHE_SECTION = 'countersPath',\r\n    MONITORS_CACHE_SECTION = 'monitors',\r\n    ncCounters = new NetCrunchCounters(adremClient, netCrunchServerConnection),\r\n    counterConsts = NETCRUNCH_COUNTER_CONST,\r\n    cache = new NetCrunchSessionCache();\r\n\r\n  cache.addSection(COUNTERS_CACHE_SECTION);\r\n  cache.addSection(COUNTERS_PATH_CACHE_SECTION);\r\n  cache.addSection(MONITORS_CACHE_SECTION);\r\n\r\n  function addCountersToCache(nodeId, countersQuery) {\r\n    cache.addToCache(COUNTERS_CACHE_SECTION, nodeId, countersQuery);\r\n  }\r\n\r\n  function getCountersFromCache(nodeId) {\r\n    return cache.getFromCache(COUNTERS_CACHE_SECTION, nodeId);\r\n  }\r\n\r\n  function addDisplayCounterPathToCache(counterPath, displayCounterPathQuery) {\r\n    cache.addToCache(COUNTERS_PATH_CACHE_SECTION, counterPath, displayCounterPathQuery);\r\n  }\r\n\r\n  function getDisplayCounterPathFromCache(counterPath) {\r\n    return cache.getFromCache(COUNTERS_PATH_CACHE_SECTION, counterPath);\r\n  }\r\n\r\n  function addMonitorsToCache(monitorsQuery) {\r\n    cache.addToCache(MONITORS_CACHE_SECTION, MONITORS_CACHE_SECTION, monitorsQuery);\r\n  }\r\n\r\n  function getMonitorsFromCache() {\r\n    return cache.getFromCache(MONITORS_CACHE_SECTION, MONITORS_CACHE_SECTION);\r\n  }\r\n\r\n  return {\r\n\r\n    prepareCountersForMonitors: function(counters, fromCache = true) {\r\n      const\r\n        counterPromises = [],\r\n        self = this;\r\n\r\n      let monitors = Object.create(null);\r\n\r\n      function createCounterObject(counter, fromCache) {\r\n        return self.convertCounterPathToDisplay(counter[1], fromCache)\r\n          .then((displayName) => {              // eslint-disable-line\r\n            return {\r\n              name: counter[1],\r\n              displayName\r\n            };\r\n          });\r\n      }\r\n\r\n      function compareCounters(counterA, counterB) {\r\n        if (counterA.displayName < counterB.displayName) {\r\n          return -1;\r\n        }\r\n        if (counterA.displayName > counterB.displayName) {\r\n          return 1;\r\n        }\r\n        if (counterA.displayName === counterB.displayName) {\r\n          return 0;\r\n        }\r\n        return 0;\r\n      }\r\n\r\n      function sortCounters(monitors) {\r\n        Object.keys(monitors).forEach((monitorId) => {\r\n          monitors[monitorId].counters.sort(compareCounters);\r\n        });\r\n        return monitors;\r\n      }\r\n\r\n      function updateMonitorNames(monitors, fromCache) {\r\n        return self.getMonitors(fromCache)\r\n          .then((monitorsMap) => {\r\n            Object.keys(monitors).forEach((monitorId) => {\r\n              if (monitorsMap[monitorId] != null) {\r\n                monitors[monitorId].name = monitorsMap[monitorId].counterGroup;\r\n              }\r\n            });\r\n            return monitors;\r\n          });\r\n      }\r\n\r\n      counters.forEach((counter) => {\r\n        if (monitors[counter[0]] == null) {\r\n          monitors[counter[0]] = Object.create(null);\r\n          monitors[counter[0]].counters = [];\r\n        }\r\n\r\n        monitors[counter[0]].counters.push(createCounterObject(counter, fromCache));\r\n      });\r\n\r\n      Object.keys(monitors).forEach((monitorId) => {\r\n        counterPromises.push(\r\n          Promise.all(monitors[monitorId].counters)\r\n            .then((counters) => {\r\n              monitors[monitorId].counters = counters;\r\n            })\r\n        );\r\n      });\r\n\r\n      return Promise.all(counterPromises)\r\n        .then(() => {\r\n          monitors = sortCounters(monitors);\r\n          return updateMonitorNames(monitors, fromCache);\r\n        });\r\n    },\r\n\r\n    getCounters: function(nodeId, fromCache = true) {\r\n      let countersQuery;\r\n\r\n      countersQuery = (fromCache) ? getCountersFromCache(nodeId) : null;\r\n      if (countersQuery == null) {\r\n        countersQuery = new Promise((resolve) => {\r\n          netCrunchServerConnection.ncSrv.IRemoteTrendDB.GetCounters(nodeId.toString(), (counters) => {\r\n            // counters are in form [ { id, path },... ]\r\n            counters = counters.map(c => ([c.id, c.path]));\r\n            resolve(counters);\r\n          });\r\n        });\r\n        addCountersToCache(nodeId, countersQuery);\r\n      }\r\n      return countersQuery;\r\n    },\r\n\r\n    convertCounterPathToDisplay: function(counterPath, fromCache = true) {\r\n      const parsedCounterPath = ncCounters.parseCounterPath(counterPath);\r\n      let\r\n        counterPathObject,\r\n        counterPathToDisplayQuery;\r\n\r\n      counterPathToDisplayQuery = (fromCache) ? getDisplayCounterPathFromCache(counterPath) : null;\r\n\r\n      if (counterPathToDisplayQuery == null) {\r\n        if (ncCounters.isMIBCnt(parsedCounterPath.obj, parsedCounterPath.cnt) === true) {\r\n          counterPathObject = ncCounters.counterPathObject(counterPath, counterConsts.CNT_TYPE.cstMIB);\r\n          counterPathToDisplayQuery = ncCounters.counterPathToDisplayStr(counterPathObject, true, true);\r\n        } else {\r\n          counterPathToDisplayQuery = ncCounters.counterPathToDisplayStr(counterPath, true, true);\r\n        }\r\n        addDisplayCounterPathToCache(counterPath, counterPathToDisplayQuery);\r\n      }\r\n      return counterPathToDisplayQuery;\r\n    },\r\n\r\n    getMonitors: function(fromCache = true) {\r\n      let monitorsQuery;\r\n\r\n      monitorsQuery = (fromCache) ? getMonitorsFromCache() : null;\r\n\r\n      if (monitorsQuery == null) {\r\n\r\n        monitorsQuery = new Promise((resolve) => {\r\n          netCrunchServerConnection.ncSrv.IMonitorsManager.GetMonitors(-1, (monitors) => {\r\n            const monitorsMap = Object.create(null);\r\n            monitors.forEach((monitor) => {\r\n              monitorsMap[monitor.id] = monitor;\r\n            });\r\n            resolve(monitorsMap);\r\n          });\r\n        });\r\n\r\n        addMonitorsToCache(monitorsQuery);\r\n      }\r\n\r\n      return monitorsQuery;\r\n    },\r\n\r\n    getCountersForMonitors: function(nodeId, fromCache) {\r\n\r\n      function getCountersTable(counters) {\r\n        let countersTable = [];\r\n        Object.keys(counters).forEach((monitorID) => {\r\n          if (monitorID > 0) {\r\n            countersTable = countersTable.concat(counters[monitorID].counters);\r\n          }\r\n        });\r\n        return countersTable;\r\n      }\r\n\r\n      return this.getCounters(nodeId, fromCache)\r\n        .then(counters => this.prepareCountersForMonitors(counters, fromCache))\r\n        .then((counters) => {\r\n          counters.table = getCountersTable(counters);\r\n          return counters;\r\n        });\r\n    },\r\n\r\n    findCounterByName: function(counters, counterName) {\r\n      let foundCounter = null;\r\n\r\n      counters.table.some((counter) => {\r\n        if (counter.name === counterName) {\r\n          foundCounter = counter;\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n      return foundCounter;\r\n    }\r\n\r\n  };\r\n}\r\n\r\nexport {\r\n  NetCrunchCountersData\r\n};\r\n"]}