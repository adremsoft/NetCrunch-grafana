{"version":3,"sources":["../../../../src/datasource/services/netCrunchAPI/netCrunchAPI.service.js"],"names":["angular","servicesModule","NetCrunchConnectionCache","NetCrunchConnection","CONNECTION_CONSTS","NETCRUNCH_TREND_DATA_CONST","CONNECTION_ERROR_MESSAGES","ERROR_MESSAGES","MAX_SAMPLE_COUNT","NET_CRUNCH_API_SERVICE_DI","NetCrunchAPIService","adrem","alertSrv","backendSrv","$rootScope","cache","datasource","clearConnection","then","getConnection","self","Promise","resolve","connectionExist","connection","logout","deleteConnection","getServerApi","reject","get","apiURL","api","catch","error","isHandled","ERROR_SERVER_API","addConnectionHandlers","onError","set","connectionName","message","onNodesChanged","$broadcast","name","onNetworksChanged","createSession","login","username","password","withoutNetworkAtlas","fromCache","url","checkStatus","checkApiVersion","serverApi","status","version","addConnection","$inject","module","service"],"mappings":"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","file":"netCrunchAPI.service.js","sourcesContent":["/**\r\n * @license\r\n * Copyright AdRem Software. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an Apache License, Version 2.0 that can be\r\n * found in the LICENSE file.\r\n */\r\n\r\n/* eslint-disable no-shadow, no-param-reassign */\r\n\r\nimport angular from 'angular';\r\nimport { servicesModule } from '../../common';\r\nimport './adrem/module';\r\nimport { NetCrunchConnectionCache } from './connectionCache';\r\nimport { NetCrunchConnection, CONNECTION_CONSTS, NETCRUNCH_TREND_DATA_CONST } from './netCrunchConnection/connection';\r\n\r\nconst\r\n  CONNECTION_ERROR_MESSAGES = CONNECTION_CONSTS.ERROR_MESSAGES,\r\n  MAX_SAMPLE_COUNT = NETCRUNCH_TREND_DATA_CONST.MAX_SAMPLE_COUNT,\r\n  NET_CRUNCH_API_SERVICE_DI = ['adrem', 'alertSrv', 'backendSrv', '$rootScope'];\r\n\r\nclass NetCrunchAPIService {\r\n\r\n  constructor(adrem, alertSrv, backendSrv, $rootScope) {\r\n    this.adrem = adrem;\r\n    this.alertSrv = alertSrv;\r\n    this.backendSrv = backendSrv;\r\n    this.$rootScope = $rootScope;\r\n    this.cache = new NetCrunchConnectionCache();\r\n  }\r\n\r\n  testConnection(datasource) {\r\n    return this.clearConnection(datasource)\r\n      .then(() => this.getConnection(datasource, true))\r\n      .then(() => this.clearConnection(datasource));\r\n  }\r\n\r\n  clearConnection(datasource) {\r\n    const self = this;\r\n    return new Promise((resolve) => {\r\n      if (self.cache.connectionExist(datasource)) {\r\n        self.cache.getConnection(datasource)\r\n          .then((connection) => {\r\n            connection.logout()\r\n              .then(() => {\r\n                self.cache.deleteConnection(datasource);\r\n                resolve();\r\n              });\r\n          });\r\n      } else {\r\n        resolve();\r\n      }\r\n    });\r\n  }\r\n\r\n  getConnection(datasource, withoutNetworkAtlas = false) {\r\n    const self = this;\r\n\r\n    function getConnectionFromCache(datasource) {\r\n      return self.cache.getConnection(datasource)\r\n        .then((connection) => {\r\n          connection.fromCache = true;\r\n          return connection;\r\n        });\r\n    }\r\n\r\n    function getServerApi(connection) {\r\n      return new Promise((resolve, reject) => {\r\n        self.backendSrv.get(`${connection.apiURL}api.json`)\r\n          .then((api) => {\r\n            resolve(api);\r\n          })\r\n          .catch((error) => {\r\n            error.isHandled = true;\r\n            reject(CONNECTION_CONSTS.ERROR_SERVER_API);\r\n          });\r\n      });\r\n    }\r\n\r\n    function addConnectionHandlers(datasource, connection) {\r\n\r\n      connection.onError = (error) => {\r\n        self.alertSrv.set(error.connectionName, error.message, 'error');\r\n      };\r\n\r\n      connection.onNodesChanged = () => {\r\n        self.$rootScope.$broadcast(`netcrunch-nodes-data-changed(${datasource.name})`);\r\n      };\r\n\r\n      connection.onNetworksChanged = () => {\r\n        self.$rootScope.$broadcast(`netcrunch-networks-data-changed(${datasource.name})`);\r\n      };\r\n\r\n      return connection;\r\n    }\r\n\r\n    function createSession(datasource, connection) {\r\n      return new Promise((resolve, reject) => {\r\n        connection.login(datasource.username, datasource.password, withoutNetworkAtlas)\r\n          .then(() => {\r\n            connection.fromCache = false;\r\n            resolve(connection);\r\n          })\r\n          .catch((error) => {\r\n            self.cache.deleteConnection(datasource);\r\n            connection.logout();\r\n            reject(error);\r\n          });\r\n      });\r\n    }\r\n\r\n    if (!this.cache.connectionExist(datasource)) {\r\n      let connection = new NetCrunchConnection(this.adrem, datasource.url, datasource.name);\r\n\r\n      return getServerApi(connection)\r\n        .then(serverApi =>\r\n          new Promise((resolve, reject) => {\r\n            const checkStatus = NetCrunchConnection.checkApiVersion(serverApi);\r\n            if (checkStatus.status === 0) {\r\n              resolve(checkStatus.version);\r\n            } else {\r\n              reject(checkStatus.status);\r\n            }\r\n          })\r\n        )\r\n        .then(() => {\r\n          connection = addConnectionHandlers(datasource, connection);\r\n          self.cache.addConnection(datasource, createSession(datasource, connection));\r\n          return self.cache.getConnection(datasource);\r\n        });\r\n    }\r\n    return getConnectionFromCache(datasource);\r\n  }\r\n\r\n}\r\n\r\nNetCrunchAPIService.$inject = NET_CRUNCH_API_SERVICE_DI;\r\n\r\nexport {\r\n  CONNECTION_ERROR_MESSAGES,\r\n  MAX_SAMPLE_COUNT\r\n};\r\n\r\nangular\r\n  .module(servicesModule)\r\n    .service('netCrunchAPIService', NetCrunchAPIService);\r\n"]}