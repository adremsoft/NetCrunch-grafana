{"version":3,"sources":["../../../../../src/datasource/services/netCrunchAPI/adrem/adremWebWorker.js"],"names":["AdremWebWorker","workerUrl","getTaskId","taskId","Date","getTime","tasks","has","Map","webWorker","Worker","onmessage","event","data","resolve","get","delete","result","executeTask","taskData","Promise","set","postMessage","taskSpec","name","args","task","funcName","async","self","reject","then","type","error","getCodeBlob","getAdremTaskDispatcher","postResult","globalScope","executeSyncFunc","apply","executeAsyncFunc","catch","eventData","bundledCode","toString","workerCode","reduce","prev","curr","Blob","getBlobURL","URL","createObjectURL","taskInterfaces","addFunctionCode","code","createInterface","push","getWebWorker","forEach","addTask"],"mappings":"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","file":"adremWebWorker.js","sourcesContent":["/**\r\n * @license\r\n * Copyright AdRem Software. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an Apache License, Version 2.0 that can be\r\n * found in the LICENSE file.\r\n */\r\n\r\n/* global Worker, Blob, URL */\r\n\r\nclass AdremWebWorker {\r\n\r\n  constructor(workerUrl) {\r\n    const\r\n      tasks = new Map(),\r\n      webWorker = new Worker(workerUrl);\r\n\r\n    function getTaskId() {\r\n      let taskId = (new Date()).getTime();\r\n      while (tasks.has(taskId)) {\r\n        taskId += 1;\r\n      }\r\n      return taskId;\r\n    }\r\n\r\n    webWorker.onmessage = (event) => {\r\n      const taskId = event.data.taskId;\r\n      if (tasks.has(taskId)) {\r\n        const resolve = tasks.get(taskId);\r\n        tasks.delete(taskId);\r\n        resolve(event.data.result);\r\n      }\r\n    };\r\n\r\n    this.executeTask = (taskData) => {\r\n      const\r\n        taskId = getTaskId(),\r\n        data = taskData;\r\n      data.taskId = taskId;\r\n      return new Promise((resolve) => {\r\n        tasks.set(taskId, resolve);\r\n        webWorker.postMessage(data);\r\n      });\r\n    };\r\n\r\n  }\r\n\r\n  addTask(taskSpec) {\r\n    // eslint-disable-next-line\r\n    this[taskSpec.name] = function(...args) {\r\n      const task = {\r\n        funcName: taskSpec.name,\r\n        args,\r\n        async: taskSpec.async\r\n      };\r\n\r\n      if (taskSpec.async === true) {\r\n        const self = this;\r\n        return new Promise((resolve, reject) => {\r\n          self.executeTask(task)\r\n            .then((result) => {\r\n              if (result.type === 'resolve') {\r\n                resolve(result.result);\r\n              }\r\n              if (result.type === 'reject') {\r\n                reject(result.error);\r\n              }\r\n            });\r\n        });\r\n      }\r\n\r\n      return this.executeTask(task);\r\n    };\r\n  }\r\n\r\n  static webWorkerBuilder() {\r\n    const\r\n      workerCode = [],\r\n      taskInterfaces = [];\r\n\r\n    function getCodeBlob() {\r\n\r\n      function getAdremTaskDispatcher() {\r\n        const globalScope = this;\r\n\r\n        function postResult(taskId, result) {\r\n          globalScope.postMessage({\r\n            taskId,\r\n            result\r\n          });\r\n        }\r\n\r\n        function executeSyncFunc(taskId, funcName, args) {\r\n          // eslint-disable-next-line\r\n          postResult(taskId, globalScope[funcName].apply(globalScope, args));\r\n        }\r\n\r\n        function executeAsyncFunc(taskId, funcName, args) {\r\n          // eslint-disable-next-line\r\n          globalScope[funcName].apply(globalScope, args)\r\n            .then(result => postResult(taskId, {\r\n              type: 'resolve',\r\n              result\r\n            }))\r\n            .catch(error => postResult(taskId, {\r\n              type: 'reject',\r\n              error\r\n            }));\r\n        }\r\n\r\n        function taskDispatcher(event) {\r\n          const eventData = event.data;\r\n          if (eventData.async !== true) {\r\n            executeSyncFunc(eventData.taskId, eventData.funcName, eventData.args);\r\n          } else {\r\n            executeAsyncFunc(eventData.taskId, eventData.funcName, eventData.args);\r\n          }\r\n        }\r\n\r\n        return taskDispatcher;\r\n      }\r\n\r\n      function getTaskDispatchingSetup() {\r\n        return `this.onmessage = ${getAdremTaskDispatcher.name}().bind(this);\\n\\n`;\r\n      }\r\n\r\n      let bundledCode;\r\n      bundledCode = getTaskDispatchingSetup();\r\n      bundledCode += `${getAdremTaskDispatcher.toString()}\\n`;\r\n      bundledCode += workerCode.reduce((prev, curr) => `${prev}\\n${curr}`, '');\r\n      return new Blob([bundledCode], { type: 'application/javascript' });\r\n    }\r\n\r\n    function getBlobURL() {\r\n      return URL.createObjectURL(getCodeBlob());\r\n    }\r\n\r\n    function addFunctionCode(code, createInterface = false, async = false) {\r\n      if (typeof code === 'function') {\r\n        workerCode.push(code.toString());\r\n        if ((createInterface === true) && (code.name != null) && (code.name !== '')) {\r\n          taskInterfaces.push({\r\n            name: code.name,\r\n            async\r\n          });\r\n        }\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    function getWebWorker() {\r\n      const webWorker = new AdremWebWorker(getBlobURL());\r\n      taskInterfaces.forEach((taskSpec) => {\r\n        webWorker.addTask(taskSpec);\r\n      });\r\n      return webWorker;\r\n    }\r\n\r\n    return {\r\n      addFunctionCode,\r\n      getWebWorker\r\n    };\r\n  }\r\n\r\n}\r\n\r\nexport {\r\n  AdremWebWorker\r\n};\r\n"]}