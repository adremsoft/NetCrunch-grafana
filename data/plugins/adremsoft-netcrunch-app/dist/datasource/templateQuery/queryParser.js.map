{"version":3,"sources":["../../../src/datasource/templateQuery/queryParser.js"],"names":["PRIVATE_PROPERTIES","type","Symbol","value","token","residuals","NULL_TOKEN_TYPE","Token","concat","filter","isNull","getToken","ReadResult","withNullTokens","aggregatedValue","reduce","aggregation","subToken","push","result","mergedValues","getNullToken","tokenType","tokenValues","tokenRegExpResult","length","getReadResult","GenericTokenReaders","pattern","input","regExpResult","match","RegExp","getReadResultFromTokenRegExp","selectorName","readToken","tokenReader","currentResult","mergeResult","tokenReadersIterator","readedTokens","iterationOK","tokenReaders","readTokens","anonymousCallback","every","some","iteratorResult","forEach","reader","index","array","getNullReadResult","QueryTokenReaders","parameterCharPattern","selectorReadResult","readSelectorToken","parameterReadResult","parameterValue","string","replace","readResult","readTokenSequence","readDot","selectorReader","readSelectorWithStringParameter","readerInput","aggregateSubTokensValues","readDotSelectorWithStringParameter","readRepetitiveToken","readFolder","QueryParser","query","atoms","readNodes","readMonitoringPacks","readNetworkAtlas","readRepetitiveFolder","readView","readName","readDeviceType","readNullToken","queryGrammar","networkFoldersView","foldersView","nothing","readTokensIfOccur","networkMap","monitoringPack","networkMapOrMonitoringPack","mapOrMonitoringPack","readFirstOccurredToken","getReadResultWithToken","parameters","nodes","parametersResult","removeNulls"],"mappings":"8/BASEA,kB,CAAqB,CACnBC,KAAMC,OAAO,MAAP,CADa,CAEnBC,MAAOD,OAAO,OAAP,CAFY,CAGnBE,MAAOF,OAAO,OAAP,CAHY,CAInBG,UAAWH,OAAO,WAAP,CAJQ,C,CAMrBI,e,CAAkB,M,CAEdC,K,YAEJ,eAAYN,CAAZ,CAAkBE,CAAlB,CAAyB,6BACvB,KAAKH,mBAAmBC,IAAxB,EAAgCA,CADT,CAEvB,KAAKD,mBAAmBG,KAAxB,EAAiCA,CAClC,C,yDAUQ,CACP,MAAQ,MAAKF,IAAL,GAAcK,eACvB,C,qCAEa,CACZ,KAAKN,mBAAmBG,KAAxB,EAAiC,GAAGK,MAAH,CAAU,KAAKL,KAAf,EAAsBM,MAAtB,CAA6B,kBAAmB,KAAT,GAAD,EAAoB,CAACL,EAAMM,MAAN,EAA9B,CAA7B,CAClC,C,4BAdU,CACT,MAAO,MAAKV,mBAAmBC,IAAxB,CACR,C,6BAEW,CACV,MAAO,MAAKD,mBAAmBG,KAAxB,CACR,C,mCAUeF,C,CAAME,C,CAAO,CAC3B,MAAO,IAAII,MAAJ,CAAUN,CAAV,CAAgBE,CAAhB,CACR,C,sCAEqB,CACpB,MAAOI,OAAMI,QAAN,CAAeL,eAAf,CAAgC,IAAhC,CACR,C,aAIGM,U,YAEJ,oBAAYR,CAAZ,CAAmBC,CAAnB,CAA8B,kCAC5B,KAAKL,mBAAmBI,KAAxB,EAAiCA,CADL,CAE5B,KAAKJ,mBAAmBK,SAAxB,EAAqCA,CACtC,C,gFAUgD,IAAxBQ,EAAwB,yDAC3CC,QAD2C,CAG7B,IAAd,OAAKV,KAHsC,GAI7CU,EAAmB,GAAGN,MAAH,CAAU,KAAKJ,KAAL,CAAWD,KAArB,CAAD,CAA8BY,MAA9B,CAAqC,SAACC,CAAD,CAAcC,CAAd,CAA2B,CAIhF,OAHIJ,GAAmB,CAACI,EAASP,MAAT,EAGxB,GAFEM,EAAYE,IAAZ,4BAAqB,GAAGV,MAAH,CAAUS,EAASd,KAAnB,CAArB,EAEF,CAAOa,CACR,CALiB,IAJ2B,CAU7C,KAAKhB,mBAAmBI,KAAxB,EAAiCG,MAAMI,QAAN,CAAe,KAAKP,KAAL,CAAWH,IAA1B,CAAgCa,CAAhC,CAVY,CAYhD,C,oCAEWK,C,CAAQd,C,CAAW,CAC7B,GAAIe,SAAJ,CACmB,IAAd,OAAKhB,KAAN,EAAmC,IAAV,GAAzB,EAA6D,IAAhB,IAAOA,KAF3B,GAG3BgB,EAAe,GAAGZ,MAAH,CAAU,KAAKJ,KAAL,CAAWD,KAArB,EAA4BK,MAA5B,CAAmCW,EAAOf,KAAP,CAAaD,KAAhD,CAHY,CAI3B,KAAKH,mBAAmBI,KAAxB,EAAiCG,MAAMI,QAAN,CAAe,KAAKP,KAAL,CAAWH,IAA1B,CAAgCmB,CAAhC,CAJN,CAK3B,KAAKpB,mBAAmBK,SAAxB,EAAmD,IAAb,GAAD,CAAkCc,EAAOd,SAAzC,CAAsBA,CALhC,CAO9B,C,6BA7BW,CACV,MAAO,MAAKL,mBAAmBI,KAAxB,CACR,C,iCAEe,CACd,MAAO,MAAKJ,mBAAmBK,SAAxB,CACR,C,iDAyB6BD,C,CAAOC,C,CAAW,CAC9C,MAAO,IAAIO,WAAJ,CAAeR,CAAf,CAAsBC,CAAtB,CACR,C,0CAEwBA,C,CAAW,CAClC,MAAO,IAAIO,WAAJ,CAAeL,MAAMc,YAAN,EAAf,CAAqChB,CAArC,CACR,C,sCAEoBiB,C,CAAWC,C,CAAalB,C,CAAW,CACtD,MAAO,IAAIO,WAAJ,CAAeL,MAAMI,QAAN,CAAeW,CAAf,CAA0BC,CAA1B,CAAf,CAAuDlB,CAAvD,CACR,C,qDAEmCiB,C,CAAWE,C,CAAmB,OACtC,KAArB,GAAD,EAA4D,CAA5B,IAAkBC,MADU,CAEvD,KAAKC,aAAL,CAAmBJ,CAAnB,CAA8BE,EAAkB,CAAlB,CAA9B,CAAoDA,EAAkB,CAAlB,CAApD,CAFuD,CAIzD,IACR,C,kBAIGG,mB,mKAEaL,C,CAAWM,C,CAASC,C,CAAO,CAC1C,GAAMC,GAAe,CAACD,GAAS,EAAV,EAAcE,KAAd,CAAoB,GAAIC,OAAJ,KAAeJ,CAAf,SAA+B,GAA/B,CAApB,CAArB,CACA,MAAOhB,YAAWqB,4BAAX,CAAwCX,CAAxC,CAAmDQ,CAAnD,CACR,C,0CAEwBR,C,CAAWY,C,CAAcL,C,CAAO,CAIvD,MAAO,MAAKM,SAAL,CAAeb,CAAf,OADmBY,CACnB,SAFuB,gCAEvB,QAA2CL,CAA3C,CACR,C,4CAE0BP,C,CAAWc,C,CAAaP,C,CAAO,QACpDQ,GAAgBD,EAAYP,CAAZ,CADoC,CAElDV,EAASkB,CAFyC,CAIhC,IAAjB,GAJiD,EAKtDA,EAAgBD,EAAYC,EAAchC,SAA1B,CALsC,CAMtDc,EAAOmB,WAAP,CAAmBD,CAAnB,CANsD,CASxD,MAAkB,KAAV,GAAD,CAA+F,IAA/F,CAAmBzB,WAAWc,aAAX,CAAyBJ,CAAzB,CAAoCH,EAAOf,KAAP,CAAaD,KAAjD,CAAwDgB,EAAOd,SAA/D,CAC3B,C,mCAEiBiB,C,CAAWiB,C,CAAsBV,C,CAAO,IAClDW,KADkD,CAGtDC,QAHsD,CAItDpC,EAAYwB,CAJ0C,CAgBxD,MAVAY,GAAcF,EAAqB,SAACH,CAAD,CAAiB,CAAQ;AAC1D,GAAMjB,GAASiB,EAAY/B,CAAZ,CAAf,CADkD,MAEpC,KAAV,GAF8C,GAGhDmC,EAAatB,IAAb,CAAkBC,EAAOf,KAAzB,CAHgD,CAIhDC,EAAYc,EAAOd,SAJ6B,IAQnD,CARa,CAUd,CAAQoC,CAAD,CAAgB7B,WAAWc,aAAX,CAAyBJ,CAAzB,CAAoCkB,CAApC,CAAkDnC,CAAlD,CAAhB,CAA+E,IACvF,C,0CAEwBiB,C,CAAWoB,C,CAAcb,C,CAAO,CAMvD,MAAO,MAAKc,UAAL,CAAgBrB,CAAhB,CAJP,SAA0BsB,CAA1B,CAA6C,CAC3C,MAAOF,GAAaG,KAAb,CAAmBD,CAAnB,CACR,CAEM,CAA6Cf,CAA7C,CACR,C,+CAE6BP,C,CAAWoB,C,CAAcb,C,CAAO,CAM5D,MAAO,MAAKc,UAAL,CAAgBrB,CAAhB,CAJP,SAA+BsB,CAA/B,CAAkD,CAChD,MAAOF,GAAaI,IAAb,CAAkBF,CAAlB,CACR,CAEM,CAAkDf,CAAlD,CACR,C,0CAEwBP,C,CAAWoB,C,CAAcb,C,CAAO,CAevD,MAAO,MAAKc,UAAL,CAAgBrB,CAAhB,CAbP,SAAyBsB,CAAzB,CAA4C,CAC1C,GAAIG,KAAJ,CASA,MAPAL,GAAaM,OAAb,CAAqB,SAACC,CAAD,CAASC,CAAT,CAAgBC,CAAhB,CAA0B,CAC7C,GAAMhC,GAASyB,EAAkBK,CAAlB,CAA0BC,CAA1B,CAAiCC,CAAjC,CAAf,CACIhC,CAFyC,GAG3C4B,IAH2C,CAK9C,CALD,CAOA,CAAOA,CACR,CAEM,CAA4ClB,CAA5C,CACR,C,sCAEoBA,C,CAAO,CAC1B,MAAOjB,YAAWwC,iBAAX,CAA6BvB,CAA7B,CACR,C,2BAIGwB,iB,6JAEaxB,C,CAAO,CACtB,MAAOF,qBAAoBQ,SAApB,CAA8B,OAA9B,CAAuC,SAAvC,CAAkDN,CAAlD,CACR,C,4CAE0BA,C,CAAO,CAChC,MAAOF,qBAAoBQ,SAApB,CAA8B,iBAA9B,CAAiD,sBAAjD,CAAyEN,CAAzE,CACR,C,wDAEsCP,C,CAAWY,C,CAAcL,C,CAAO,IAEnEyB,GAAuB,6EAF4C,CAInEC,EAAqB5B,oBAAoB6B,iBAApB,CAAsC,EAAtC,CAA0CtB,CAA1C,CAAwDL,CAAxD,CAJ8C,CAMnE4B,QANmE,CAOnEC,QAPmE,OAkB3C,KAAtB,GAlBiE,GAmBnED,EAAsB9B,oBAAoBQ,SAApB,CAA8B,EAA9B,UAhBMmB,CAgBN,aAhBsCA,CAgBtC,aAAoDC,EAAmBnD,KAAnB,CAAyBD,KAA7E,CAnB6C,CAoBnEuD,EAXF,SAA4BC,CAA5B,CAAoC,CAClC,GAAIxC,SAAJ,CAKA,MAHAA,GAAS,CAACwC,GAAU,EAAX,EAAeC,OAAf,CAAuB,OAAvB,CAAgC,GAAhC,CAGT,CAFAzC,EAASA,EAAOyC,OAAP,CAAe,OAAf,CAAwB,GAAxB,CAET,CADAzC,EAASA,EAAOyC,OAAP,CAAe,MAAf,CAAuB,GAAvB,CACT,CAAOzC,CACR,CAIkB,CAAmBsC,EAAoBrD,KAApB,CAA0BD,KAA7C,CApBkD,EAuB1C,IAAtB,GAAD,EAAwD,IAAvB,GAvBgC,CAwB5DS,WAAWc,aAAX,CAAyBJ,CAAzB,CAAoCoC,CAApC,CAAoDH,EAAmBlD,SAAvE,CAxB4D,CA2B9D,IACR,C,gCAEcwB,C,CAAO,CACpB,MAAOF,qBAAoBQ,SAApB,CAA8B,KAA9B,CAAqC,OAArC,CAA8CN,CAA9C,CACR,C,2DAEyCP,C,CAAWY,C,CAAcL,C,CAAO,gBAGtEgC,EAAalC,oBAAoBmC,iBAApB,CAAsC,EAAtC,CAA0C,CAAC,KAAKC,OAAN,CADrC,QAAlBC,EAAkB,UAAe,OAAKC,+BAAL,CAAqC,EAArC,CAAyC/B,CAAzC,CAAuDgC,CAAvD,CAAf,CACqC,CAA1C,CAA0ErC,CAA1E,CAHyD,OAKtD,KAAd,GALoE,CASjE,IATiE,EAMtEgC,EAAWM,wBAAX,EANsE,CAO/DvD,WAAWc,aAAX,CAAyBJ,CAAzB,CAAoCuC,EAAWzD,KAAX,CAAiBD,KAAjB,CAAuB,CAAvB,CAApC,CAA+D0D,EAAWxD,SAA1E,CAP+D,CAUzE,C,yCAEuBwB,C,CAAO,CAC7B,MAAOwB,mBAAkBe,kCAAlB,CAAqD,cAArD,CAAqE,cAArE,CAAqFvC,CAArF,CACR,C,mCAEiBA,C,CAAO,CACvB,MAAOwB,mBAAkBe,kCAAlB,CAAqD,QAArD,CAA+D,QAA/D,CAAyEvC,CAAzE,CACR,C,6CAE2BA,C,CAAO,CACjC,GAAMV,GAASQ,oBAAoB0C,mBAApB,CAAwC,SAAxC,CAAmDhB,kBAAkBiB,UAArE,CAAiFzC,CAAjF,CAAf,CACA,MAAOV,EACR,C,iCAEeU,C,CAAO,CACrB,MAAOwB,mBAAkBe,kCAAlB,CAAqD,MAArD,CAA6D,MAA7D,CAAqEvC,CAArE,CACR,C,iCAEeA,C,CAAO,CACrB,MAAOwB,mBAAkBe,kCAAlB,CAAqD,MAArD,CAA6D,MAA7D,CAAqEvC,CAArE,CACR,C,uCAEqBA,C,CAAO,CAG3B,MAAOF,qBAAoBQ,SAApB,CAA8B,YAA9B,mHAAmEN,CAAnE,CACR,C,+CAIG0C,W,uIAWSC,C,CAAO,CAClB,GACEC,GAAQ,CACN,MAASpB,kBAAkBqB,SADrB,CACwD;AAC9D,mBAAoBrB,kBAAkBsB,mBAFhC,CAGN,gBAAiBtB,kBAAkBuB,gBAH7B,CAIN,oBAAqBvB,kBAAkBwB,oBAJjC,CAKN,QAASxB,kBAAkByB,QALrB,CAMN,QAASzB,kBAAkB0B,QANrB,CAON,cAAe1B,kBAAkB2B,cAP3B,CAQN,QAAWrD,oBAAoBsD,aAA+B;AARxD,CADV,CAWEC,EAAe,CAEbC,mBAAoB,SAACtD,CAAD,CAAW,CAC7B,GACEuD,GAAc,CAACX,EAAM,mBAAN,CAAD,CAA6BA,EAAM,OAAN,CAA7B,CAA6CA,EAAMY,OAAnD,CADhB,CAEElE,EAASQ,oBAAoB2D,iBAApB,CAAsC,oBAAtC,CAA4DF,CAA5D,CAAyEvD,CAAzE,CAFX,CAMA,MAHc,KAAV,GAGJ,EAFEV,EAAOgD,wBAAP,EAEF,CAAOhD,CACR,CAVY,CAYboE,WAAY,SAAC1D,CAAD,CAAW,CACrB,GACE0D,GAAa,CAACd,EAAM,eAAN,CAAD,CAAyBS,EAAaC,kBAAtC,CADf,CAEEhE,EAASQ,oBAAoBmC,iBAApB,CAAsC,YAAtC,CAAoDyB,CAApD,CAAgE1D,CAAhE,CAFX,CAOA,MAHc,KAAV,GAGJ,EAFEV,EAAOgD,wBAAP,EAEF,CAAOhD,CACR,CArBY,CAuBbqE,eAAgB,SAAC3D,CAAD,CAAW,CACzB,GACE2D,GAAiB,CAACf,EAAM,kBAAN,CAAD,CAA4BA,EAAM,mBAAN,CAA5B,CAAwDA,EAAM,OAAN,CAAxD,CADnB,CAEEtD,EAASQ,oBAAoBmC,iBAApB,CAAsC,gBAAtC,CAAwD0B,CAAxD,CAAwE3D,CAAxE,CAFX,CAOA,MAHc,KAAV,GAGJ,EAFEV,EAAOgD,wBAAP,EAEF,CAAOhD,CACR,CAhCY,CAkCbsE,2BAA4B,SAAC5D,CAAD,CAAW,CACrC,GACE6D,GAAsB,CAACR,EAAaK,UAAd,CAA0BL,EAAaM,cAAvC,CAAuDf,EAAMY,OAA7D,CADxB,CAEElE,EAASQ,oBAAoBgE,sBAApB,CAA2C,EAA3C,CAA+CD,CAA/C,CAAoE7D,CAApE,CAFX,CADqC,MAIvB,KAAV,GAJiC,CAO9B,IAP8B,CAK5BjB,WAAWgF,sBAAX,CAAkCzE,EAAOf,KAAP,CAAaD,KAAb,CAAmB,CAAnB,CAAlC,CAAyDgB,EAAOd,SAAhE,CAGV,CA1CY,CA4CbmE,MAAO,SAAC3C,CAAD,CAAW,IACVgE,GAAa,CAACX,EAAaO,0BAAd,CAA0ChB,EAAM,aAAN,CAA1C,CAAgEA,EAAMY,OAAtE,CADH,CAGdlE,EAASsD,EAAMqB,KAAN,CAAYjE,CAAZ,CAHK,CAIdkE,QAJc,CAYhB,MANc,KAAV,GAMJ,GALE5E,EAASP,WAAWc,aAAX,CAAyB,OAAzB,CAAkC,CAACP,EAAOf,KAAR,CAAlC,CAAkDe,EAAOd,SAAzD,CAKX,CAJE0F,EAAmBpE,oBAAoB2D,iBAApB,CAAsC,EAAtC,CAA0CO,CAA1C,CAAsD1E,EAAOd,SAA7D,CAIrB,CAHEc,EAAOmB,WAAP,CAAmByD,CAAnB,CAGF,CAFE5E,EAAOf,KAAP,CAAa4F,WAAb,EAEF,EAAO7E,CACR,CAzDY,CAXjB,CAwEA,MAAO+D,GAAaV,KAAb,CAAmBA,CAAnB,CACR,C,0CAKDD,W","file":"queryParser.js","sourcesContent":["/**\r\n * @license\r\n * Copyright AdRem Software. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an Apache License, Version 2.0 that can be\r\n * found in the LICENSE file.\r\n */\r\n\r\nconst\r\n  PRIVATE_PROPERTIES = {\r\n    type: Symbol('type'),\r\n    value: Symbol('value'),\r\n    token: Symbol('token'),\r\n    residuals: Symbol('residuals')\r\n  },\r\n  NULL_TOKEN_TYPE = 'NULL';\r\n\r\nclass Token {\r\n\r\n  constructor(type, value) {\r\n    this[PRIVATE_PROPERTIES.type] = type;\r\n    this[PRIVATE_PROPERTIES.value] = value;\r\n  }\r\n\r\n  get type() {\r\n    return this[PRIVATE_PROPERTIES.type];\r\n  }\r\n\r\n  get value() {\r\n    return this[PRIVATE_PROPERTIES.value];\r\n  }\r\n\r\n  isNull() {\r\n    return (this.type === NULL_TOKEN_TYPE);\r\n  }\r\n\r\n  removeNulls() {\r\n    this[PRIVATE_PROPERTIES.value] = [].concat(this.value).filter(token => (token != null) && (!token.isNull()));\r\n  }\r\n\r\n  static getToken(type, value) {\r\n    return new Token(type, value);\r\n  }\r\n\r\n  static getNullToken() {\r\n    return Token.getToken(NULL_TOKEN_TYPE, null);\r\n  }\r\n\r\n}\r\n\r\nclass ReadResult {\r\n\r\n  constructor(token, residuals) {\r\n    this[PRIVATE_PROPERTIES.token] = token;\r\n    this[PRIVATE_PROPERTIES.residuals] = residuals;\r\n  }\r\n\r\n  get token() {\r\n    return this[PRIVATE_PROPERTIES.token];\r\n  }\r\n\r\n  get residuals() {\r\n    return this[PRIVATE_PROPERTIES.residuals];\r\n  }\r\n\r\n  aggregateSubTokensValues(withNullTokens = false) {\r\n    let aggregatedValue;\r\n\r\n    if (this.token != null) {\r\n      aggregatedValue = ([].concat(this.token.value)).reduce((aggregation, subToken) => {\r\n        if (withNullTokens || (!subToken.isNull())) {\r\n          aggregation.push(...([].concat(subToken.value)));\r\n        }\r\n        return aggregation;\r\n      }, []);\r\n      this[PRIVATE_PROPERTIES.token] = Token.getToken(this.token.type, aggregatedValue);\r\n    }\r\n  }\r\n\r\n  mergeResult(result, residuals) {\r\n    let mergedValues;\r\n    if ((this.token != null) && (result != null) && (result.token != null)) {\r\n      mergedValues = [].concat(this.token.value).concat(result.token.value);\r\n      this[PRIVATE_PROPERTIES.token] = Token.getToken(this.token.type, mergedValues);\r\n      this[PRIVATE_PROPERTIES.residuals] = (residuals != null) ? residuals : result.residuals;\r\n    }\r\n  }\r\n\r\n  static getReadResultWithToken(token, residuals) {\r\n    return new ReadResult(token, residuals);\r\n  }\r\n\r\n  static getNullReadResult(residuals) {\r\n    return new ReadResult(Token.getNullToken(), residuals);\r\n  }\r\n\r\n  static getReadResult(tokenType, tokenValues, residuals) {\r\n    return new ReadResult(Token.getToken(tokenType, tokenValues), residuals);\r\n  }\r\n\r\n  static getReadResultFromTokenRegExp(tokenType, tokenRegExpResult) {\r\n    if ((tokenRegExpResult != null) && (tokenRegExpResult.length >= 3)) {\r\n      return this.getReadResult(tokenType, tokenRegExpResult[1], tokenRegExpResult[2]);\r\n    }\r\n    return null;\r\n  }\r\n\r\n}\r\n\r\nclass GenericTokenReaders {\r\n\r\n  static readToken(tokenType, pattern, input) {\r\n    const regExpResult = (input || '').match(new RegExp(`^${pattern}(.*)$`, 'i'));\r\n    return ReadResult.getReadResultFromTokenRegExp(tokenType, regExpResult);\r\n  }\r\n\r\n  static readSelectorToken(tokenType, selectorName, input) {\r\n    const\r\n      selectorParametersPattern = '(?:(?:\\\\\\\\\\\\(|\\\\\\\\\\\\))|[^()])+',\r\n      selectorPattern = `(?:${selectorName})\\\\((${selectorParametersPattern})\\\\)`;\r\n    return this.readToken(tokenType, selectorPattern, input);\r\n  }\r\n\r\n  static readRepetitiveToken(tokenType, tokenReader, input) {\r\n    let currentResult = tokenReader(input);\r\n    const result = currentResult;\r\n\r\n    while (currentResult != null) {\r\n      currentResult = tokenReader(currentResult.residuals);\r\n      result.mergeResult(currentResult);\r\n    }\r\n\r\n    return (result != null) ? ReadResult.getReadResult(tokenType, result.token.value, result.residuals) : null;\r\n  }\r\n\r\n  static readTokens(tokenType, tokenReadersIterator, input) {\r\n    const readedTokens = [];\r\n    let\r\n      iterationOK,\r\n      residuals = input;\r\n\r\n    iterationOK = tokenReadersIterator((tokenReader) => {       // eslint-disable-line prefer-const\r\n      const result = tokenReader(residuals);\r\n      if (result != null) {\r\n        readedTokens.push(result.token);\r\n        residuals = result.residuals;\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n\r\n    return (iterationOK) ? ReadResult.getReadResult(tokenType, readedTokens, residuals) : null;\r\n  }\r\n\r\n  static readTokenSequence(tokenType, tokenReaders, input) {\r\n\r\n    function sequenceIterator(anonymousCallback) {\r\n      return tokenReaders.every(anonymousCallback);\r\n    }\r\n\r\n    return this.readTokens(tokenType, sequenceIterator, input);\r\n  }\r\n\r\n  static readFirstOccurredToken(tokenType, tokenReaders, input) {\r\n\r\n    function firstOccurredIterator(anonymousCallback) {\r\n      return tokenReaders.some(anonymousCallback);\r\n    }\r\n\r\n    return this.readTokens(tokenType, firstOccurredIterator, input);\r\n  }\r\n\r\n  static readTokensIfOccur(tokenType, tokenReaders, input) {\r\n\r\n    function ifOccurIterator(anonymousCallback) {\r\n      let iteratorResult = false;\r\n\r\n      tokenReaders.forEach((reader, index, array) => {\r\n        const result = anonymousCallback(reader, index, array);\r\n        if (result) {\r\n          iteratorResult = true;\r\n        }\r\n      });\r\n\r\n      return iteratorResult;\r\n    }\r\n\r\n    return this.readTokens(tokenType, ifOccurIterator, input);\r\n  }\r\n\r\n  static readNullToken(input) {\r\n    return ReadResult.getNullReadResult(input);\r\n  }\r\n\r\n}\r\n\r\nclass QueryTokenReaders {\r\n\r\n  static readNodes(input) {\r\n    return GenericTokenReaders.readToken('nodes', '(nodes)', input);\r\n  }\r\n\r\n  static readMonitoringPacks(input) {\r\n    return GenericTokenReaders.readToken('monitoringPacks', '\\\\.(monitoringPacks)', input);\r\n  }\r\n\r\n  static readSelectorWithStringParameter(tokenType, selectorName, input) {\r\n    const\r\n      parameterCharPattern = '(?:[\\\\w~`!@#$%^&*_+-=\\\\[\\\\]{};\\':<>,\\\\.\\\\?\\\\/|]|\\\\\\\\\"|\\\\\\\\\\\\(|\\\\\\\\\\\\)|\\\\\\\\)',\r\n      parameterPattern = `\"(\\\\s*${parameterCharPattern}+(?:[\\\\s]${parameterCharPattern}+)*\\\\s*)\"`,\r\n      selectorReadResult = GenericTokenReaders.readSelectorToken('', selectorName, input);\r\n    let\r\n      parameterReadResult,\r\n      parameterValue;\r\n\r\n    function replaceHashedChars(string) {\r\n      let result;\r\n\r\n      result = (string || '').replace(/\\\\\\(/g, '(');\r\n      result = result.replace(/\\\\\\)/g, ')');\r\n      result = result.replace(/\\\\\"/g, '\"');\r\n      return result;\r\n    }\r\n\r\n    if (selectorReadResult != null) {\r\n      parameterReadResult = GenericTokenReaders.readToken('', parameterPattern, selectorReadResult.token.value);\r\n      parameterValue = replaceHashedChars(parameterReadResult.token.value);\r\n    }\r\n\r\n    if ((selectorReadResult != null) && (parameterReadResult != null)) {\r\n      return ReadResult.getReadResult(tokenType, parameterValue, selectorReadResult.residuals);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  static readDot(input) {\r\n    return GenericTokenReaders.readToken('dot', '(\\\\.)', input);\r\n  }\r\n\r\n  static readDotSelectorWithStringParameter(tokenType, selectorName, input) {\r\n    const\r\n      selectorReader = (readerInput => this.readSelectorWithStringParameter('', selectorName, readerInput)),\r\n      readResult = GenericTokenReaders.readTokenSequence('', [this.readDot, selectorReader], input);\r\n\r\n    if (readResult != null) {\r\n      readResult.aggregateSubTokensValues();\r\n      return ReadResult.getReadResult(tokenType, readResult.token.value[1], readResult.residuals);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  static readNetworkAtlas(input) {\r\n    return QueryTokenReaders.readDotSelectorWithStringParameter('networkAtlas', 'networkAtlas', input);\r\n  }\r\n\r\n  static readFolder(input) {\r\n    return QueryTokenReaders.readDotSelectorWithStringParameter('folder', 'folder', input);\r\n  }\r\n\r\n  static readRepetitiveFolder(input) {\r\n    const result = GenericTokenReaders.readRepetitiveToken('folders', QueryTokenReaders.readFolder, input);\r\n    return result;\r\n  }\r\n\r\n  static readView(input) {\r\n    return QueryTokenReaders.readDotSelectorWithStringParameter('view', 'view', input);\r\n  }\r\n\r\n  static readName(input) {\r\n    return QueryTokenReaders.readDotSelectorWithStringParameter('name', 'name', input);\r\n  }\r\n\r\n  static readDeviceType(input) {\r\n    const deviceTypes = 'windows\\\\.server|windows\\\\.workstation|windows|linux|bsd|macos|solaris|esx|xenserver' +\r\n                        '|unix|novell|ibm';\r\n    return GenericTokenReaders.readToken('deviceType', `\\\\.(${deviceTypes})`, input);\r\n  }\r\n\r\n}\r\n\r\nclass QueryParser {\r\n\r\n  /*\r\n    Query grammar:\r\n      <networkFolderView> ::= ['.repetitiveFolder'][.view]'nothing'\r\n      <networkMap> ::= '.networkAtlas'['networkFolderView']\r\n      <monitoringPack> ::= '.monitoringPacks''.repetitiveFolder''.name'\r\n      <networkMapOrMonitoringPack> ::= <networkMap>|<monitoringPack>\r\n      <query> ::= 'nodes'[<networkMapOrMonitoringPack>]['.deviceType']\r\n  */\r\n\r\n  static parse(query) {\r\n    const\r\n      atoms = {\r\n        'nodes': QueryTokenReaders.readNodes,                         // eslint-disable-line quote-props\r\n        '.monitoringPacks': QueryTokenReaders.readMonitoringPacks,\r\n        '.networkAtlas': QueryTokenReaders.readNetworkAtlas,\r\n        '.repetitiveFolder': QueryTokenReaders.readRepetitiveFolder,\r\n        '.view': QueryTokenReaders.readView,\r\n        '.name': QueryTokenReaders.readName,\r\n        '.deviceType': QueryTokenReaders.readDeviceType,\r\n        'nothing': GenericTokenReaders.readNullToken                  // eslint-disable-line quote-props\r\n      },\r\n      queryGrammar = {\r\n\r\n        networkFoldersView: (input) => {\r\n          const\r\n            foldersView = [atoms['.repetitiveFolder'], atoms['.view'], atoms.nothing],\r\n            result = GenericTokenReaders.readTokensIfOccur('networkFoldersView', foldersView, input);\r\n          if (result != null) {\r\n            result.aggregateSubTokensValues();\r\n          }\r\n          return result;\r\n        },\r\n\r\n        networkMap: (input) => {\r\n          const\r\n            networkMap = [atoms['.networkAtlas'], queryGrammar.networkFoldersView],\r\n            result = GenericTokenReaders.readTokenSequence('networkMap', networkMap, input);\r\n\r\n          if (result != null) {\r\n            result.aggregateSubTokensValues();\r\n          }\r\n          return result;\r\n        },\r\n\r\n        monitoringPack: (input) => {\r\n          const\r\n            monitoringPack = [atoms['.monitoringPacks'], atoms['.repetitiveFolder'], atoms['.name']],\r\n            result = GenericTokenReaders.readTokenSequence('monitoringPack', monitoringPack, input);\r\n\r\n          if (result != null) {\r\n            result.aggregateSubTokensValues();\r\n          }\r\n          return result;\r\n        },\r\n\r\n        networkMapOrMonitoringPack: (input) => {\r\n          const\r\n            mapOrMonitoringPack = [queryGrammar.networkMap, queryGrammar.monitoringPack, atoms.nothing],\r\n            result = GenericTokenReaders.readFirstOccurredToken('', mapOrMonitoringPack, input);\r\n          if (result != null) {\r\n            return ReadResult.getReadResultWithToken(result.token.value[0], result.residuals);\r\n          }\r\n          return null;\r\n        },\r\n\r\n        query: (input) => {\r\n          const parameters = [queryGrammar.networkMapOrMonitoringPack, atoms['.deviceType'], atoms.nothing];\r\n          let\r\n            result = atoms.nodes(input),\r\n            parametersResult;\r\n\r\n          if (result != null) {\r\n            result = ReadResult.getReadResult('query', [result.token], result.residuals);\r\n            parametersResult = GenericTokenReaders.readTokensIfOccur('', parameters, result.residuals);\r\n            result.mergeResult(parametersResult);\r\n            result.token.removeNulls();\r\n          }\r\n          return result;\r\n        }\r\n\r\n      };\r\n\r\n    return queryGrammar.query(query);\r\n  }\r\n\r\n}\r\n\r\nexport {\r\n  QueryParser\r\n};\r\n"]}